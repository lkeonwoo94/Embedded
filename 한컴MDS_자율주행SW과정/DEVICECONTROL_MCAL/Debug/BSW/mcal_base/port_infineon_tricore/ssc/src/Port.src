	; Module start
	.compiler_version	"TASKING VX-toolset for TriCore: C compiler v4.2r2 Build 744.1.1"
	.compiler_invocation	"ctc -f cc3920a -c90 --dep-file=BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\.Port.o.d -D__CPU__=tc27x -D__CPU_TC27X__ --core=tc1.6.x -F --uchar -D_TASKING_C_TRICORE_ -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\ASW -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\ecum_infineon_tricore\\ssc\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\general\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\general\\tricore\\compiler -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\general\\tricore\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\general\\tricore\\inc\\TC27xC -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\integration_general\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\irq_infineon_tricore\\ssc\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\mcu_infineon_tricore\\ssc\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\tricore_general\\ssc\\inc -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_gen\\Demo_Aurix -IC:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_gen\\inc -g --make-target=BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.o -t4 --language=+comments,-gcc,-volatile,+strings --default-near-size=8 -O0 --default-a1-size=0 --default-a0-size=0 --source --align=0 --switch=auto -o BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.src ..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c"
	.compiler_name		"ctc"
	.name	"Port"

	
$TC16X
	.sdecl	'.zrodata.Port..1.cnt',data,rom
	.sect	'.zrodata.Port..1.cnt'
	.align	2
.1.cnt:	.type	object
	.size	.1.cnt,4
	.word	15789061
	.sdecl	'.zrodata.Port..2.cnt',data,rom
	.sect	'.zrodata.Port..2.cnt'
	.align	2
.2.cnt:	.type	object
	.size	.2.cnt,4
	.word	-268197888
	.sdecl	'.zrodata.Port..3.cnt',data,rom
	.sect	'.zrodata.Port..3.cnt'
	.align	2
.3.cnt:	.type	object
	.size	.3.cnt,4
	.word	6299648
	.sdecl	'.zrodata.Port..4.cnt',data,rom
	.sect	'.zrodata.Port..4.cnt'
	.align	2
.4.cnt:	.type	object
	.size	.4.cnt,4
	.word	150000
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Port_Init')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Port_Init

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     1  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     2  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     3  ** Copyright (C) Infineon Technologies (2014)                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     4  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     5  ** All rights reserved.                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     6  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     7  ** This document contains proprietary information belonging to Infineon       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     8  ** Technologies. Passing on and copying of this document, and communication   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	     9  ** of its contents is not permitted without prior written authorization.      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    10  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    11  ********************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    12  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    13  **  $FILENAME   : Port.c $                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    14  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    15  **  $CC VERSION : \main\72 $                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    16  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    17  **  $DATE       : 2014-11-06 $                                               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    18  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    19  **  AUTHOR       : DL-AUTOSAR-Engineering                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    20  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    21  **  VENDOR       : Infineon Technologies                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    22  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    23  **  DESCRIPTION  : This file contains                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    24  **                 - functionality of Port driver.                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    25  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    26  **  MAY BE CHANGED BY USER [Yes/No]: No                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    27  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    28  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    29  /*  TRACEABILITY : [cover parentID=DS_AS_PORT107_PORT146_4,DS_NAS_PORT_PR127,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    30                      SAS_NAS_PORT_PR913,DS_AS40X_PORT114,DS_NAS_PORT_PR131,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    31                      DS_NAS_PORT_PR228,DS_AS_PORT107_PORT146,SAS_NAS_ALL_PR1652,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    32                      SAS_AS_PORT080_PORT108_PORT130_PORT131_PORT133_PORT208,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    33                      SAS_NAS_PORT_PR734,SAS_NAS_ALL_PR749,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    34                      SAS_NAS_ALL_PR630_PR631,SAS_NAS_ALL_PR70]
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    35                     [/cover]                                                   */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    36  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    37  **                      Includes                                              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    38  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    39  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    40  /* Inclusion of Tasking sfr file */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    41  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    42  #include "IfxPort_reg.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    43  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    44  /* Global functions like Set/Reset END INIT protection bit,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    45    Enable/Disable interrupts, Automic write function */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    46  #include "Mcal.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    47  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    48  /* Own header file, this includes own configuration file also */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    49  /* PORT080: Inclusion structure */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    50  #include "Port.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    51  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    52  /*AS and SW version Specific include file */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    53  #include "Port_Ver.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    54  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    55  /* Inclusion from Safety Error */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    56  #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    57  #include "SafetyReport.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    58  #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    59  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    60  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    61  **                      Private Macro Definitions                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    62  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    63  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    64  /*
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    65    Offset definitions for data in Port configuration
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    66  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    67  /* Initial Control data offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    68  #define PORT_DATA_OFS_CTL      (0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    69  /* Initial level data offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    70  #define PORT_DATA_OFS_LEVEL    (4U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    71  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    72  /* If pin mode changeable is enabled */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    73  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    74  /* Pin mode changeable or not offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    75  #define PORT_DATA_OFS_MODE     (7U) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    76  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    77  #define PORT_OUT_PIN_MASK      (0xC0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    78  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    79  #endif /* (PORT_SET_PIN_MODE_API) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    80  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    81  /* If Direction changeable is enabled */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    82  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    83  /* If pin mode changeable is enabled */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    84  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    85  /* Pin direction data offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    86  #define PORT_DATA_OFS_DIR      (8U) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    87  /* Control data 2 offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    88  #define PORT_DATA_OFS_CTL2     (9U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    89  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    90  #else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    91  /* Pin direction data offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    92  #define PORT_DATA_OFS_DIR      (7U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    93  /* Control data 2 offset */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    94  #define PORT_DATA_OFS_CTL2     (8U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    95  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    96  #endif /* (PORT_SET_PIN_MODE_API) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    97  #endif /* (PORT_SET_PIN_DIRECTION_API) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    98  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	    99  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   100  /* Mask to get direction info from Pin control value */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   101  #define PORT_DIR_MSK           (0x80U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   102  #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   103  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   104  /* IOCR0 register offset in Ifx_P */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   105  #define PORT_IOCR0_REG_OFFSET  (4U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   106  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   107  /* TBD */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   108  /* LPCR register offset in Ifx_P */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   109  #define PORT_LPCR_REG_OFFSET   (0x28U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   110  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   111  /* PCSR register offset in Ifx_P */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   112  #define PORT_PCSR_REG_OFFSET   (0x19U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   113  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   114  #if(PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   115  /* Status to indicate that PORT is initialized */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   116  #define PORT_INITIALIZED  ((uint8)1)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   117  #endif  /*(PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   118  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   119  /* Before Setting the Iocr register, To Check the Port number below
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   120     macro's are used */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   121  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   122  #define PORT_PIN_0_3           (0x000F)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   123  #define PORT_PIN_4_7           (0x00F0)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   124  #define PORT_PIN_8_11          (0x0F00)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   125  #define PORT_PIN_12_15         (0xF000)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   126  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   127  /* 8-bit mask value from 8th to 15th bit */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   128  #define PORT_PDR1_MASK         (0xFF00U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   129  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   130  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   131  /* offset value where the port number is present */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   132  #define PORT_NUMBER_OFFSET     (4U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   133  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   134  /* lower 8-bit mask value in hex to get the port number */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   135  #define PORT_NUM_LOW8_MASK     (0x000000FFU)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   136  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   137  /* lower 4-bit mask value in hex to get the pin number of a port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   138  #define PORT_PIN_LOW4_MASK     (0x0FU)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   139  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   140  #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   141  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   142  /* lower 16-bit mask value in Hex */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   143  #define PORT_LOWER_16BIT_MASK  (0x0000FFFFU)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   144  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   145  /* 16-bit shift value */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   146  #define PORT_16BIT_SHIFTVALUE  (16U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   147  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   148  /* general constants */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   149  #define PORT_CONSTANT_16       (16U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   150  #define PORT_CONSTANT_10       (10U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   151  #define PORT_NUMBER_32         (32U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   152  #define PORT_NUMBER_31         (31U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   153  #define PORT_CONSTANT_0x01     (0x01U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   154  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   155  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   156  #if (PORT_SET_PIN_MODE_API == STD_ON) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   157  #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   158  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   159  /* Available Inverted Port Mask */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   160  #define AVAILABLE_MODE_MASK    ((Port_PinModeType)(0xC7U))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   161  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   162  #endif /*(PORT_SET_PIN_MODE_API==STD_ON) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   163  #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   164  /* ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   165  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   166  /* Maximum port pin number */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   167  #define PORT_PIN_MAX_NUMBER    (15U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   168  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   169  /* Mcal Safety ENDINIT Timeout value */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   170  #define PORT_ENDINIT_TIMEOUT   (150000U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   171  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   172  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   173  **                   Function like macro definitions                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   174  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   175  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   176  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   177  **                      Private Type Definitions                              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   178  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   179  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   180  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   181  **                      Private Function Declarations                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   182  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   183  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   184  #define PORT_START_SEC_CODE
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   185  /*mapping of code and data to specific memory sections via memory mapping file*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   186  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   187  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   188  /*INLINE function to initialize Port module*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   189  IFX_LOCAL_INLINE void Port_lIOInit(void);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   190  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   191  /*INLINE function to initialize Port module*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   192  IFX_LOCAL_INLINE void Port_lPDRInit(void);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   193  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   194  /*INLINE function to extract the Address of Px_OUT register */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   195  IFX_LOCAL_INLINE Ifx_P *Port_lAdr(uint32 PortNumber); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   196  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   197  /*INLINE function to to check if the port 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   198    is available or not for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   199  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable31(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   200  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   201  /*INLINE function to check if the port 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   202    is available or not for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   203  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable40(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   204  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   205  /*INLINE function to check if the port is 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   206    available or not for the microcontroller    */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   207  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   208  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   209  /*INLINE function to check if the port is read only or it is writable */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   210  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly31(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   211  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   212  /*INLINE function to check if the port is read only or it is writable */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   213  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly40(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   214  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   215  /*INLINE function to check if the port is read only or it is writable*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   216  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   217  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   218  /*INLINE function to check if the port pin is 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   219    available or not for the microcontroller      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   220  IFX_LOCAL_INLINE uint16 Port_lIsPinAvailable(uint32 Port,uint32 Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   221  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   222  /*INLINE function to check if any of the 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   223    portpin 8-15 is available or not for the micro*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   224  IFX_LOCAL_INLINE uint16 Port_lIsPortPdr1Available(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   225  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   226  /*INLINE function to check if the IOCRx register for the port
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   227     is available or not for the micro */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   228  IFX_LOCAL_INLINE uint16 Port_lIsPortIocrAvailable(uint32 Port,uint16 Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   229  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   230  #if (PORT_SET_PIN_MODE_API == STD_ON) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   231  #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   232  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   233  /*INLINE function to check the error 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   234    in the Port_SetPinMode Api  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   235  IFX_LOCAL_INLINE uint32 Port_lModeErrChk
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   236  (
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   237    uint8 Dir, Port_PinModeType Mode, uint32 ConfigIndex, uint32 PinNumber
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   238  );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   239  IFX_LOCAL_INLINE uint8 Port_lChkPin
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   240  (
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   241    Port_PinType Pin,uint32 PortNo,uint32 PinNo
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   242  );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   243  #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   244  /*(PORT_SET_PIN_MODE_API==STD_ON) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   245  #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   246  /* ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   247  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   248  /*INLINE function for OMR register value 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   249    to set the configured initial level      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   250  IFX_LOCAL_INLINE uint32 Port_lPinLevel(uint32 Level);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   251  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   252  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   253  /*INLINE function to extract port number Port_PinType data */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   254  IFX_LOCAL_INLINE uint32 Port_lNumber(Port_PinType Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   255  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   256  /*INLINE function to extract pin number from Port_PinType data*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   257  IFX_LOCAL_INLINE uint32 Port_lPinNumber(Port_PinType Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   258  #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   259  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   260  /*INLINE function to to check if the port supports LVDS
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   261     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   262  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   263  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   264  /*INLINE function to to check if the port supports LVDS
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   265     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   266  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable40(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   267  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   268  /*INLINE function to to check if the port supports LVDS
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   269     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   270  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   271  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   272  /*INLINE function to to check if the port supports PCSR
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   273     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   274  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   275  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   276  /*INLINE function to to check if the port supports PCSR
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   277     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   278  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable40(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   279  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   280  /*INLINE function to to check if the port supports PCSR
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   281     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   282  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable(uint32 Port);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   283  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   284  /*INLINE function to to check if the port supports PCSR
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   285     for the microcontroller */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   286  IFX_LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable(uint32 PortLPCRvalue);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   287  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   288  #if (PORT_INIT_CHECK_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   289  IFX_LOCAL_INLINE uint8 Port_lChkIocr(uint32 PortNo,const uint32 *DataPtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   290  IFX_LOCAL_INLINE uint8 Port_lChkLVDS(uint32 PortNo,const uint32 *LVDSDataPtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   291  IFX_LOCAL_INLINE uint8 Port_lChkPDR(uint32 PortNo,uint32 Data_PDR0, 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   292                                     uint32 Data_PDR1);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   293  #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   294  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   295  #define PORT_STOP_SEC_CODE
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   296  /*mapping of code and data to specific memory sections via memory mapping file*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   297  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   298   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   299  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   300  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   301  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   302  **                      Global Constant Definitions                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   303  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   304  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   305  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   306  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   307  **                      Global Variable Definitions                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   308  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   309  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   310  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   311  **                      Private Constant Definitions                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   312  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   313  /* Mapping of 16 bit constant */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   314  #define PORT_START_SEC_CONST_16BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   315  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   316   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   317  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   318  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   319  /* Total pin count for each port, This constant is used during DET check */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   320  static const uint16 Port_kAvailablePins[] =
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   321  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   322    PORT_AVAILABLE_PINS_PORT0,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   323    PORT_AVAILABLE_PINS_PORT1,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   324    PORT_AVAILABLE_PINS_PORT2,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   325    PORT_AVAILABLE_PINS_PORT3,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   326    PORT_AVAILABLE_PINS_PORT4,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   327    PORT_AVAILABLE_PINS_PORT5,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   328    PORT_AVAILABLE_PINS_PORT6,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   329    PORT_AVAILABLE_PINS_PORT7,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   330    PORT_AVAILABLE_PINS_PORT8,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   331    PORT_AVAILABLE_PINS_PORT9,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   332    PORT_AVAILABLE_PINS_PORT10,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   333    PORT_AVAILABLE_PINS_PORT11,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   334    PORT_AVAILABLE_PINS_PORT12,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   335    PORT_AVAILABLE_PINS_PORT13,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   336    PORT_AVAILABLE_PINS_PORT14,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   337    PORT_AVAILABLE_PINS_PORT15,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   338    PORT_AVAILABLE_PINS_PORT16,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   339    PORT_AVAILABLE_PINS_PORT17,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   340    PORT_AVAILABLE_PINS_PORT18,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   341    PORT_AVAILABLE_PINS_PORT19,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   342    PORT_AVAILABLE_PINS_PORT20,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   343    PORT_AVAILABLE_PINS_PORT21,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   344    PORT_AVAILABLE_PINS_PORT22,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   345    PORT_AVAILABLE_PINS_PORT23,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   346    PORT_AVAILABLE_PINS_PORT24,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   347    PORT_AVAILABLE_PINS_PORT25,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   348    PORT_AVAILABLE_PINS_PORT26,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   349    PORT_AVAILABLE_PINS_PORT27,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   350    PORT_AVAILABLE_PINS_PORT28,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   351    PORT_AVAILABLE_PINS_PORT29,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   352    PORT_AVAILABLE_PINS_PORT30,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   353    PORT_AVAILABLE_PINS_PORT31,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   354    PORT_AVAILABLE_PINS_PORT32,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   355    PORT_AVAILABLE_PINS_PORT33,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   356    PORT_AVAILABLE_PINS_PORT34,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   357    PORT_AVAILABLE_PINS_PORT35,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   358    PORT_AVAILABLE_PINS_PORT36,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   359    PORT_AVAILABLE_PINS_PORT37,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   360    PORT_AVAILABLE_PINS_PORT38,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   361    PORT_AVAILABLE_PINS_PORT39,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   362    PORT_AVAILABLE_PINS_PORT40
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   363  };
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   364  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   365  #define PORT_STOP_SEC_CONST_16BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   366  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   367   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   368  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   369  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   370  **                      Private Variable Definitions                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   371  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   372  #if(PORT_PB_FIXEDADDR == STD_OFF)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   373  #define PORT_START_SEC_VAR_32BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   374  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   375   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   376  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   377  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   378  /* To store the Port driver configuration pointer */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   379  static  const Port_ConfigType  *Port_kConfigPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   380  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   381  #define PORT_STOP_SEC_VAR_32BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   382  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   383   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   384  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   385  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   386  #endif /*(PORT_PB_FIXEDADDR == STD_OFF) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   387  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   388  #if(PORT_PB_FIXEDADDR == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   389  #define PORT_START_SEC_CONST_32BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   390  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   391   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   392  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   393  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   394  /* To store the Port driver configuration pointer */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   395  static  const Port_ConfigType * const Port_kConfigPtr = &Port_ConfigRoot[0];
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   396  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   397  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   398  #define PORT_STOP_SEC_CONST_32BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   399  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   400   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   401  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   402  #endif /*(PORT_PB_FIXEDADDR == STD_ON) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   403  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   404  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   405  #if(PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   406  /* Start 8 bit variable section */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   407  #define PORT_START_SEC_VAR_8BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   408  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   409   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   410  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   411  /* Init Status Variable. It has to be initialized to "0U" after every reset as 0
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   412     represents the deinitialized state */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   413  static uint8 Port_InitStatus;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   414  /* Stop 8 bit variable section */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   415  #define PORT_STOP_SEC_VAR_8BIT
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   416  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   417   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   418  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   419  #endif  /*(PORT_DEV_ERROR_DETECT == STD_ON)*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   420  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   421  **                      Private Function Definitions                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   422  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   423  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   424  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   425  **                      Global Function Definitions                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   426  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   427  /* Mapping the code */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   428  #define PORT_START_SEC_CODE
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   429  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   430   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   431  #include "MemMap.h"
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   432  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   433  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   434  ** Traceability     : [cover parentID=DS_AS_PORT140,DS_AS_PORT003,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   435                         DS_AS_PORT101_PORT211_1,DS_AS_PORT107_PORT146_1,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   436                         DS_AS_PORT107_PORT146_4,DS_AS4XX_PORT087_1,DS_AS_PORT105,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   437                         DS_AS_PORT148,DS_AS_PORT005,DS_AS_PORT078,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   438                         DS_AS3XX_PORT087_1,DS_AS_PORT077,DS_AS_PORT082,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   439                         SAS_MCAL_PORT_0402,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   440                         SAS_MCAL_PORT_0407,SAS_MCAL_PORT_0415,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   441                         DS_MCAL_PORT_0415,DS_MCAL_PORT_0417,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   442                         DS_MCAL_PORT_0402,DS_AS_PORT107_PORT146_4]            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   443  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   444  ** Syntax           : void Port_Init                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   445  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   446  **                      const Port_ConfigType * ConfigPtr                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   447  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   448  ** [/cover]                                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   449  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   450  ** Service ID       : 0x00                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   451  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   452  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   453  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   454  ** Reentrancy       : non - reentrant                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   455  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   456  ** Parameters(in)   : const Port_ConfigType * ConfigPtr - Pointer to          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   457  **                    PORT configuration                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   458  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   459  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   460  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   461  ** Return value     : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   462  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   463  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   464  **   - PORT041: PORT042: Initializes all the ports as per configuration       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   465  **   - PORT001: This API initializes the whole port structure of MCU          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   466  **   - PORT003: This API can be used to initialize and reinitialize the       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   467  **     port with different configuration                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   468  **   - PORT078: This function should be called first in order to initialize   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   469  **     the port for use                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   470  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   471  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   472  void Port_Init ( const Port_ConfigType * ConfigPtr )
; Function Port_Init
.L66:
Port_Init:	.type	func

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   473  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   474    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   475    uint8 ErrStatus;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   476    ErrStatus = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   477    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   478    #if(PORT_PB_FIXEDADDR == STD_OFF)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   479    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   480    if (ConfigPtr == NULL_PTR)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   481    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   482      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   483      /* Report PORT_E_PARAM_CONFIG DET */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   484      #if (PORT_DEV_ERROR_DETECT == STD_ON)  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   485      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   486          PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   487      #endif  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   488      /* PORT087: Skip the API functionality and return from the API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   489      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   490      /* Report a safety error */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   491      #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   492      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   493                       PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   494      #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   495          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   496      ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   497    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   498    #else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   499    if (ConfigPtr != Port_kConfigPtr)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   500    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   501  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   502      /* Report PORT_E_PARAM_CONFIG DET */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   503      #if (PORT_DEV_ERROR_DETECT == STD_ON)  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   504      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   505        PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   506      #endif  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   507      /* PORT087: Skip the API functionality and return from the API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   508      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   509      /* Report a safety error */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   510      #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   511      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   512                       PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   513      #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   514          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   515      ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   516    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   517    #endif /*(PORT_PB_FIXEDADDR == STD_ON)*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   518    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   519    #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   520    if ((ErrStatus != 1U) &&
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   521        (ConfigPtr->PortMarker != ((uint32)PORT_MODULE_ID << 16U)))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   522    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   523      /* report to upper layer */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   524      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   525                       PORT_SID_INIT,PORT_E_PARAM_CONFIG);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   526      ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   527      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   528    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   529    #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   530    /*End Of PORT_SAFETY_ENABLE*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   531    #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   532    /*(PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON)*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   533    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   534    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   535    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   536    if (ErrStatus == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   537    #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   538    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   539      /* PORT002: The function Port_Init() shall also initialize all variables
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   540         used by the PORT driver module to an initial state.
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   541         There are no such variables in the port module
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   542      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   543      #if(PORT_PB_FIXEDADDR == STD_OFF)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   544        Port_kConfigPtr = ConfigPtr; 
	st.a	Port_kConfigPtr,a4
.L91:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   545      #else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   546        /* To remove GNU warning of unused parameter ConfigPtr */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   547        UNUSED_PARAMETER(ConfigPtr)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   548      #endif  /*(PORT_PB_FIXEDADDR == STD_OFF)*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   549  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   550      /* Initialise General Purpose I/O Ports and Peripheral I/O Lines */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   551      Port_lIOInit();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   552  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   553      #if(PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   554      /* Set Status to indicate that initialization is done */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   555      Port_InitStatus = PORT_INITIALIZED;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   556      #endif  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   557    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   558  }/* Port_Init */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   559  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   560  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   561  #if (PORT_INIT_CHECK_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   562  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   563  ** Traceability     : [cover parentID=SAS_MCAL_PORT_0402,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   564                        SAS_MCAL_PORT_0405,SAS_MCAL_PORT_0406,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   565                        SAS_MCAL_PORT_0407,SAS_MCAL_PORT_0431,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   566                        DS_MCAL_PORT_0403,DS_MCAL_PORT_0403_1,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   567                        DS_MCAL_PORT_0404,DS_MCAL_PORT_0405,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   568                        DS_MCAL_PORT_0406,DS_MCAL_PORT_0417,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   569                        DS_NAS_PORT_PR123]                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   570  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   571  ** Syntax           : Std_ReturnType Port_InitCheck                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   572  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   573  **                      const Port_ConfigType * ConfigPtr                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   574  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   575  ** [/cover]                                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   576  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   577  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   578  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   579  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   580  ** Reentrancy       : non - reentrant                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   581  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   582  ** Parameters(in)   : const Port_ConfigType * ConfigPtr - Pointer to          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   583  **                    PORT configuration                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   584  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   585  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   586  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   587  ** Return value     : Std_ReturnType                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   588  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   589  ** Description      : This function checks Port SFR's and Global              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   590  **                      variables initialized by Port_Init Api                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   591  **                    This API is available only if PortInitCheckApi is TRUE  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   592  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   593  Std_ReturnType Port_InitCheck ( const Port_ConfigType * ConfigPtr )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   594  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   595  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   596    uint8 ErrStatus;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   597    uint8 ErrPdr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   598    uint32 PortNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   599    /* Index to identify the port configuration information
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   600    from the configuration array  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   601    uint8 ConfigIndex;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   602    Ifx_P  *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   603    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   604    const uint32 *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   605    const Port_n_ConfigType *ConfigDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   606    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   607    const uint32  *LVDSDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   608    const uint32  *PCSRDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   609    volatile uint32  *PCSRRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   610  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   611    uint8 LevelFlag;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   612    uint8 IocrFlag;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   613  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   614    uint8 LVDSFlag;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   615    uint8 PCSRFlag;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   616    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   617    ErrStatus = E_OK;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   618    ConfigIndex = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   619    LevelFlag = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   620    LVDSFlag = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   621    PCSRFlag = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   622    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   623      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   624    if (Port_kConfigPtr != ConfigPtr) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   625    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   626    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   627       ErrStatus = E_NOT_OK;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   628    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   629    else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   630    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   631  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   632      LVDSDataPtr = (const uint32*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   633                                 (Port_kConfigPtr->Port_LVDSConfigTypePtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   634      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   635      PCSRDataPtr = (const uint32*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   636                                 (Port_kConfigPtr->Port_PCSRConfigTypePtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   637  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   638      for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   639      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   640  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   641        /* Parameter Port is checked for validity */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   642        if(Port_lIsPortAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   643        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   644          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   645          /* Check PDR Registers Initialization */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   646          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   647          /* Port driver strength is configured in Port PDR0 register */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   648  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   649          PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   650          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   651          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   652          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   653          /*IFX_MISRA_RULE_17_04_STATUS= Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   654          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   655          ErrPdr = Port_lChkPDR(PortNumber,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   656          Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength0, 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   657          Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength1);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   658          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   659          if (ErrPdr == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   660          {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   661            /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   662          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   663            ConfigDataPtr = (Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex ;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   664    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   665            /* Address of each port configuration */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   666            DataPtr = (const uint32 *)(const void*)(ConfigDataPtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   667    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   668          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   669            /* Check Port Level Registers Initialization */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   670            
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   671            if(Port_lIsPortReadOnly(PortNumber) == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   672            {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   673              /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   674            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   675              if(PortAddressPtr->OUT.U == (*(DataPtr + PORT_DATA_OFS_LEVEL)))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   676              {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   677                LevelFlag = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   678              }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   679            }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   680            else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   681            {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   682               LevelFlag = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   683            }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   684     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   685            if (LevelFlag == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   686            {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   687              
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   688               /* Check IOCR0,4,8,12 Registers Initialization */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   689              
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   690               IocrFlag = Port_lChkIocr(PortNumber,DataPtr);      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   691                  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   692               if (IocrFlag == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   693               {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   694                 /* Check Port LVDS and PCSR Registers Initialization */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   695                 if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   696                 {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   697                   LVDSFlag = Port_lChkLVDS(PortNumber,LVDSDataPtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   698                   /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   699          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   700                   LVDSDataPtr += PORT_MAX_LPCR_REG;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   701                 }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   702             
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   703                 if(LVDSFlag == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   704                 {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   705                   if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   706                   {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   707                     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   708            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   709                     PCSRRegPtr = ((volatile uint32*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   710                                   (volatile void*)PortAddressPtr +
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   711                                    PORT_PCSR_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   712                     if (*PCSRRegPtr == *PCSRDataPtr)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   713                     {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   714                       PCSRFlag = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   715                     }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   716                     /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   717            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   718                     PCSRDataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   719                   }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   720                   /* PCSR is not available then make PCSRFlag as FALSE */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   721                   else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   722                   {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   723                      PCSRFlag = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   724                   }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   725                 }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   726               }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   727            }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   728          }    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   729          /* If LVDSFlag or PCSRFlag as True, then return as error */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   730          if((LVDSFlag != 0U) || (PCSRFlag != 0U))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   731          {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   732             ErrStatus = E_NOT_OK;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   733             break;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   734          }  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   735       ConfigIndex++; 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   736       }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   737  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   738       LevelFlag = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   739       PCSRFlag = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   740   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   741       if(PortNumber == PORT_MAX_NUMBER)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   742       {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   743         if (P40_PDISC.U != *(Port_kConfigPtr->PDiscSet))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   744         {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   745           ErrStatus = E_NOT_OK;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   746         }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   747       } 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   748      } /* For loop */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   749    } /* Else */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   750    return(ErrStatus);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   751  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   752  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   753  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkPDR                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   754  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   755  **                      uint32 PortNo,uint32 Data_PDR0, uint32 Data_PDR1      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   756  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   757  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   758  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   759  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   760  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   761  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   762  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   763  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   764  ** Parameters (in)  : uint32 PortNo - Port number whose  PDR to be checked    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   765  **                    uint32 Data_PDR0 - Data of DriverStrength0              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   766  **                    uint32 Data_PDR1 - Data of DriverStrength1              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   767  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   768  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   769  ** Return value     : uint8                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   770  **                    0- No error if PDR value is correct                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   771  **                    1- Error if PDR value is not correct                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   772  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   773  ** - The function like macro is to check if configured  Port PDR value is     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   774  **    same as read PDR value                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   775  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   776  IFX_LOCAL_INLINE uint8 Port_lChkPDR(uint32 PortNo,uint32 Data_PDR0, 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   777                                     uint32 Data_PDR1)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   778  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   779    uint8 ErrPdr = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   780    Ifx_P  *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   781      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   782    PortAddressPtr = Port_lAdr(PortNo);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   783    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   784    if(PortNo < PORT_MAX_NUMBER)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   785    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   786      if(PortAddressPtr->PDR0.U != Data_PDR0)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   787      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   788        ErrPdr = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   789      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   790    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   791      if(Port_lIsPortPdr1Available(PortNo) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   792      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   793    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   794        if(PortAddressPtr->PDR1.U != Data_PDR1)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   795        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   796          ErrPdr = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   797        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   798      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   799    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   800    return(ErrPdr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   801  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   802  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   803  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkIocr                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   804  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   805  **                      uint32 PortNo,const uint32 *DataPtr                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   806  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   807  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   808  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   809  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   810  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   811  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   812  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   813  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   814  ** Parameters (in)  : uint32 PortNo - Port number whose Iocr to be checked    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   815  **                    const uint32 *DataPtr - Data read from Iocr register    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   816  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   817  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   818  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   819  ** Return value     : uint8                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   820  **                    0 -No error if Iocr register value is correct           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   821  **                    1 -Error if Iocr register  value is not correct         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   822  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   823  ** - The function like macro is to check if configured  Port Iocr value is    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   824  **    same as read Iocr value                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   825  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   826  IFX_LOCAL_INLINE uint8 Port_lChkIocr(uint32 PortNo,const uint32 *DataPtr)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   827  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   828    uint8 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   829    Ifx_P  *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   830    uint32 Index;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   831    uint16 PinAvailable;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   832    uint32 PinMask;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   833    uint8 PinPosition;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   834    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   835    RetVal = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   836        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   837    PortAddressPtr = Port_lAdr(PortNo);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   838         
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   839    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_0_3)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   840    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   841      PinPosition = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   842      PinMask = 0U; 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   843      for(Index = 0U; Index<4U ; Index++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   844      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   845        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   846         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   847         
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   848         if (PinAvailable)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   849         {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   850           PinMask |= ((uint32)0xF8U << PinPosition);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   851         }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   852        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   853        PinPosition += 8U;  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   854      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   855      if((PortAddressPtr->IOCR0.U & PinMask) != ((*DataPtr) & PinMask))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   856      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   857        RetVal = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   858      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   859    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   860    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   861            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   862    DataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   863  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   864    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_4_7)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   865    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   866      PinPosition = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   867      PinMask = 0U;     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   868      for(Index = 4U; Index<8U ; Index++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   869      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   870        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   871         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   872         
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   873         if (PinAvailable)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   874         {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   875           PinMask |= ((uint32)0xF8U << PinPosition);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   876         }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   877        PinPosition += 8U;          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   878      } 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   879      if((PortAddressPtr->IOCR4.U & PinMask) != ((*DataPtr) & PinMask))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   880      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   881        RetVal = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   882      } 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   883    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   884    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   885            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   886    DataPtr++;  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   887      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   888    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_8_11)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   889    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   890      PinPosition = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   891      PinMask = 0U;     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   892      for(Index = 8U; Index<12U ; Index++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   893      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   894        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   895         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   896         
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   897         if (PinAvailable)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   898         {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   899           PinMask |= ((uint32)0xF8U << PinPosition);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   900         }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   901        PinPosition += 8U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   902      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   903    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   904      if((PortAddressPtr->IOCR8.U & PinMask) != ((*DataPtr) & PinMask))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   905      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   906        RetVal = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   907      }  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   908    }  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   909    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   910            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   911    DataPtr++;   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   912      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   913    if(Port_lIsPortIocrAvailable(PortNo,(uint16)PORT_PIN_12_15)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   914    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   915      PinPosition = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   916      PinMask = 0U;     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   917      for(Index = 12U; Index<16U ; Index++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   918      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   919        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   920         PinAvailable  = Port_lIsPinAvailable(PortNo,Index);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   921         
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   922         if (PinAvailable)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   923         {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   924           PinMask |= ((uint32)0xF8U << PinPosition);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   925         }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   926        PinPosition += 8U;        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   927      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   928      if((PortAddressPtr->IOCR12.U & PinMask) != ((*DataPtr) & PinMask))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   929      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   930        RetVal = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   931      }  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   932    }       
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   933  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   934    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   935  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   936  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   937  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   938  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkLVDS                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   939  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   940  **                      uint32 PortNo,const uint32 *LVDSDataPtr               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   941  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   942  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   943  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   944  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   945  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   946  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   947  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   948  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   949  ** Parameters (in)  : uint32 PortNo - Port LVDS to be checked                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   950  **                    const uint32 *LVDSDataPtr - Data pointer reads the data **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   951  **                    from LVDS register                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   952  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   953  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   954  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   955  ** Return value     : uint8                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   956  **                    0- No error if LVDS value is correct....................**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   957  **                    1- Error if LVDS value is not correct                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   958  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   959  ** - The function like macro is to check if configured  Port Lvds value is    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   960  **    same as read Lvds value                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   961  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   962  IFX_LOCAL_INLINE uint8 Port_lChkLVDS(uint32 PortNo,const uint32 *LVDSDataPtr)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   963  { 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   964   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   965    uint8 counter;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   966    uint8 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   967    volatile uint32 *LVDSRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   968    Ifx_P  *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   969    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   970    RetVal = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   971  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   972    PortAddressPtr = Port_lAdr(PortNo);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   973    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   974    /* Check Port LVDS Initialization */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   975          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   976      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   977            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   978      LVDSRegPtr  = ((volatile uint32*)(volatile void*)PortAddressPtr + 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   979                    PORT_LPCR_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   980      for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   981      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   982        if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   983        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   984          /* LPCRn */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   985          if(*LVDSRegPtr != *LVDSDataPtr)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   986          {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   987            RetVal = 1U; 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   988            break;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   989          }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   990  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   991        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   992        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   993            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   994        LVDSRegPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   995        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   996            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   997        LVDSDataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   998      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	   999  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1000    return(RetVal);   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1001           
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1002  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1003  #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1004  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1005  /* Enable / Disable the use of the function */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1006  #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1007  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1008  ** Traceability     : [cover parentID=DS_AS_PORT141,DS_AS_PORT086,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1009                         DS_AS_PORT075_1,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1010                         DS_MCAL_PORT_0416,DS_AS_PORT063,DS_AS_PORT137,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1011                         DS_AS_PORT101_PORT211_2,DS_AS_PORT107_PORT146_2,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1012                         DS_AS4XX_PORT087_2,DS_AS3XX_PORT087_2,DS_AS_PORT054,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1013                         DS_AS_PORT213,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1014                         DS_AS_PORT138,DS_AS_PORT077,DS_NAS_PORT_PR912_1,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1015                         SAS_MCAL_PORT_0411,SAS_MCAL_PORT_0415,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1016                         DS_MCAL_PORT_0417, DS_AS_PORT107_PORT146_4,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1017                         DS_MCAL_PORT_0411_1]                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1018  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1019  ** Syntax           : void Port_SetPinDirection                               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1020  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1021  **                      Port_PinType Pin,                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1022  **                      Port_PinDirectionType Direction                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1023  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1024  ** [/cover]                                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1025  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1026  ** Service ID       : 0x01                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1027  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1028  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1029  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1030  ** Reentrancy       : Re-entrant                                              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1031  **                    (This function shall be re-entrant if accessing         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1032  **                     different pins, independent of port.)                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1033  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1034  ** Parameters (in)  : Port_PinType Pin - port pin ID whose direction has      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1035                        to be set                                               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1036  **                    Port_PinDirectionType Direction - port pin direction    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1037                        to be set                                               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1038  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1039  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1040  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1041  ** Return value     : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1042  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1043  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1044  **  - PORT063: sets the port pin direction during runtime                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1045  **  - PORT059: This functionality is available for parameter Pin              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1046  **     whose direction is configured as changeable during run time            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1047  **  - PORT086: This function is only available if the pre-compiler switch     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1048  **    PORT_SET_PIN_DIRECTION_API is set STD_ON.                               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1049  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1050  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1051  void Port_SetPinDirection(Port_PinType Pin, Port_PinDirectionType Direction)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1052  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1053    /* Each Port Number for the hardware unit  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1054    uint32               PortNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1055    uint32               PinNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1056    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1057    uint8                ErrStatus;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1058    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1059    uint32               PortAvailable;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1060    uint32               PortReadOnly;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1061    uint32               PinAvailable;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1062    #endif /*PORT_DEV_ERROR_DETECT == STD_ON */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1063    #endif /*PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1064    uint32               ConfigIndex;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1065    uint32               Index;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1066    const uint8         *IocrDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1067    volatile uint8      *IocrRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1068    const uint32        *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1069    Ifx_P               *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1070    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1071    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1072    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1073    ErrStatus = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1074    #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1075     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1076    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1077    /* Check for DET: PORT_E_UNINIT */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1078    if (Port_InitStatus != PORT_INITIALIZED)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1079    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1080      /* Report PORT_E_UNINIT DET if Port initialisation is not done */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1081      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1082          PORT_SID_SETPINDIRECTION,PORT_E_UNINIT);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1083        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1084      /* PORT087: Skip the API functionality and return from the API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1085    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1086    else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1087    #endif /* PORT_DEV_ERROR_DETECT */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1088    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1089      /* Extract the port number and pin number from the Pin Symbolic ID */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1090      PortNumber = (uint32)Port_lNumber(Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1091      PinNumber  = (uint32)Port_lPinNumber(Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1092  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1093      #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1094      /* PORT077: Function parameters are checked in the order in which they are
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1095                 passed.
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1096      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1097      /* PORT087: Check if Pin is valid */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1098     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1099      #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1100      PortAvailable = Port_lIsPortAvailable(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1101      PortReadOnly  = Port_lIsPortReadOnly(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1102     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1103      PinAvailable = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1104      if( PortAvailable != 0U )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1105      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1106        PinAvailable  = Port_lIsPinAvailable(PortNumber,PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1107      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1108  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1109      if ( (Pin > PORT_MAX_PIN_ID) ||
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1110           ((PortReadOnly != 0U) || (PinAvailable == 0U))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1111         )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1112      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1113     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1114        /*Report PORT_E_PARAM_PIN DET if the pin is out of range */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1115        Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1116            PORT_SID_SETPINDIRECTION,PORT_E_PARAM_PIN); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1117  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1118        ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1119     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1120      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1121      #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1122     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1123      #if (PORT_SAFETY_ENABLE == STD_ON)   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1124      if(Pin > PORT_MAX_PIN_ID)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1125      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1126        /*Report Safety Error if the pin is out of range */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1127        SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1128           PORT_SID_SETPINDIRECTION,PORT_E_PARAM_PIN);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1129          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1130        ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1131        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1132      } 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1133        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1134     if((Direction != PORT_PIN_IN) && (Direction != PORT_PIN_OUT))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1135     {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1136       /*Report Safety Error if the direction is out of range */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1137       SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1138                       PORT_SID_SETPINDIRECTION,PORT_E_PARAM_DIRECTION);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1139       
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1140       ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1141  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1142     }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1143     #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1144     #endif /* PORT_DEV_ERROR_DETECT and PORT_SAFETY_ENABLE */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1145     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1146     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1147     #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1148     if (ErrStatus == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1149     #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1150     {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1151      ConfigIndex = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1152      for(Index = 0U;Index < PortNumber;Index++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1153      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1154        if(Port_lIsPortAvailable(Index) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1155        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1156          ConfigIndex++; /* to identify the Index of configuration*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1157        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1158      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1159  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1160      /* Get the config data location for specified Port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1161      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1162          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1163      DataPtr =(const uint32*)(const void*)(
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1164                (Port_kConfigPtr->PortConfigSetPtr)+ConfigIndex);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1165  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1166      /*parameter Pin is valid, check for pin direction changeable DET error */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1167      /*
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1168      PORT059: PORT087: Check if the direction is configured as changeable or not
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1169      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1170      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1171          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1172      if ( ((*(DataPtr + PORT_DATA_OFS_DIR)) & ((uint32)0x01U << PinNumber))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1173             == PORT_PIN_DIR_NOT_CHANGEABLE
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1174              )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1175      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1176       #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1177         /* Report PORT_E_DIRECTION_UNCHANGEABLE DET if pin is configured for
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1178            direction not changeable
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1179         */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1180         Det_ReportError(
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1181           (uint16)PORT_MODULE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1182           PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1183           PORT_SID_SETPINDIRECTION,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1184           PORT_E_DIRECTION_UNCHANGEABLE);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1185       #endif /* PORT_DEV_ERROR_DETECT */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1186      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1187      else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1188      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1189       /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1190          due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1191       IocrDataPtr = (const uint8*)(const void*)(DataPtr + PORT_DATA_OFS_CTL);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1192  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1193       /* Get Port Address */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1194       PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1195       /* Get the IOCR0 register address of particular port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1196       /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1197            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1198       IocrRegPtr = (volatile uint8*)(volatile void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1199                    ((volatile uint32*)(volatile void*)PortAddressPtr + \ 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1200                                               PORT_IOCR0_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1201  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1202       /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1203          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1204       if((*(IocrDataPtr + PinNumber) & (uint8)PORT_DIR_MSK)==(uint8)Direction)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1205       {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1206         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1207          due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1208         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1209            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1210         *(IocrRegPtr + PinNumber) = *(IocrDataPtr + PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1211       }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1212       else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1213       {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1214        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1215            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1216        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1217          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1218        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1219          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1220        *(IocrRegPtr + PinNumber) =*((const uint8*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1221                                     (DataPtr + PORT_DATA_OFS_CTL2)+ PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1222       }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1223      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1224     }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1225    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1226  } /* Port_SetPinDirection */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1227  #endif /* Direction changes allowed / Port_SetPinDirection API is ON */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1228  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1229  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1230  ** Traceability     : [cover parentID=DS_AS_PORT142,DS_AS_PORT075_2,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1231                          DS_AS_PORT101_PORT211_3,DS_AS_PORT107_PORT146_3,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1232                          DS_AS4XX_PORT087_3,DS_AS3XX_PORT087_3,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1233                          DS_AS_PORT060_PORT061_PORT066,DS_AS_PORT213,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1234                          SAS_MCAL_PORT_0411,DS_AS_PORT107_PORT146_4,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1235                          DS_MCAL_PORT_0411_2]                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1236  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1237  ** Syntax           : void Port_RefreshPortDirection ( void )                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1238  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1239  ** [/cover]                                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1240  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1241  ** Service ID       : 0x02                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1242  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1243  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1244  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1245  ** Reentrancy       : non - reentrant                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1246  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1247  ** Parameters (in)  : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1248  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1249  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1250  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1251  ** Return value     : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1252  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1253  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1254  **   - PORT060: PORT061: PORT066: refreshes the direction for all the port    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1255  **     pins that are configured as direction not changeable during run time   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1256  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1257  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1258  void Port_RefreshPortDirection(void)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1259  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1260    uint32                LoopCtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1261    /* Each Port Number for the hardware unit  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1262    uint32                PortNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1263    uint32                ConfigIndex;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1264    #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1265    /* Direction changeable allowed */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1266    uint32                DirectionData;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1267    uint32                PinPos;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1268    #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1269    const uint32          *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1270    const uint8           *IocrDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1271    volatile uint8        *IocrRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1272    Ifx_P *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1273    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1274    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1275    /* Check for DET: PORT_E_UNINIT */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1276    if (Port_InitStatus != PORT_INITIALIZED)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1277    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1278      /* Report PORT_E_UNINIT DET if Port initialisation is not done
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1279      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1280     Det_ReportError(
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1281        (uint16)PORT_MODULE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1282        PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1283        PORT_SID_REFRESHPORTDIR,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1284        PORT_E_UNINIT);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1285      /* PORT087: Skip the API functionality and return from the API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1286    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1287    else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1288    #endif /* (PORT_DEV_ERROR_DETECT) == STD_ON*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1289    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1290     /* Loop from Port 0 till last Port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1291     PortNumber = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1292     ConfigIndex = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1293     do
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1294     {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1295       if(Port_lIsPortAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1296       {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1297         /* Pointer to the data for the port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1298         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1299          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1300         DataPtr = (const uint32*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1301                   ((Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1302  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1303         #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1304         /* Direction changeable allowed */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1305         /* Get the direction changeable configuration for all the port pins */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1306         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1307          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1308         DirectionData = *(DataPtr + PORT_DATA_OFS_DIR);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1309         #endif /* PORT_SET_PIN_DIRECTION_API == STD_ON*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1310     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1311         /* Pointer to control data for the first pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1312         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1313          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1314         IocrDataPtr = (const uint8*)(const void*)(DataPtr + PORT_DATA_OFS_CTL);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1315  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1316         /* Pointer to control register for the first pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1317         /* Get Port Address */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1318         PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1319         /* Get the IOCR0 register address of particular port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1320         /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1321            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1322         IocrRegPtr = (volatile uint8*)(volatile void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1323                       ((volatile uint32 *)(volatile void*)PortAddressPtr + \ 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1324                                                 PORT_IOCR0_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1325  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1326         /* Start from the first pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1327         #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1328         PinPos = 0x01U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1329         #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1330  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1331         LoopCtr = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1332         do
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1333         {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1334          if(Port_lIsPinAvailable(PortNumber,LoopCtr) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1335          {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1336            #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1337            /* Direction changeable is enabled */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1338            if ( (DirectionData & PinPos) == PORT_PIN_DIR_NOT_CHANGEABLE)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1339            {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1340              /* Direction of the pin cannot be changed during run time */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1341              /* Write the default value to the control bit fields of the Pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1342              *IocrRegPtr = *IocrDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1343            }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1344            #else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1345            /* Direction changeable is disabled */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1346            /* Write the default value to the control bit fields of the Pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1347            *IocrRegPtr = *IocrDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1348            #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1349          }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1350          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1351          /* Increment to point to the next data set */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1352          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1353            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1354          IocrRegPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1355          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1356            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1357          IocrDataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1358  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1359          #if (PORT_SET_PIN_DIRECTION_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1360          /* Shift the pin position to next pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1361          PinPos = PinPos << 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1362          #endif /* PORT_SET_PIN_DIRECTION_API */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1363  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1364          /* Loop for each pin in the port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1365          LoopCtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1366         } while (LoopCtr <= PORT_PIN_MAX_NUMBER ); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1367  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1368        ConfigIndex++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1369       }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1370      PortNumber++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1371     } while (PortNumber <= PORT_MAX_NUMBER); /* Loop for all the ports */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1372    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1373  }/* Port_RefreshPortDirection */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1374  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1375  /* Enable / Disable the use of the function */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1376  #if (PORT_SET_PIN_MODE_API == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1377  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1378  ** Traceability     : [cover parentID=DS_AS_PORT145,DS_AS_PORT125,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1379                          DS_AS_PORT128,DS_AS_PORT101_PORT211_5,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1380                          DS_AS_PORT107_PORT146_5,DS_AS4XX_PORT087_5,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1381                          DS_AS3XX_PORT087_5,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1382                          DS_AS4XX_PORT223,DS_AS_PORT213,DS_AS_PORT077,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1383                          DS_NAS_PORT_PR912_3,SAS_MCAL_PORT_0409,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1384                          SAS_MCAL_PORT_0415,SAS_MCAL_PORT_0410,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1385                          DS_MCAL_PORT_0417,DS_MCAL_PORT_0409]                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1386  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1387  ** Syntax           : void Port_SetPinMode                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1388  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1389  **                      Port_PinType Pin,                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1390  **                      Port_PinModeType Mode                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1391  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1392  ** [/cover]                                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1393  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1394  ** Service ID       : 0x04                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1395  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1396  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1397  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1398  ** Reentrancy       : Re-entrant                                              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1399  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1400  ** Parameters (in)  : Port_PinType Pin - port pin ID whose mode has to be set **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1401  **                    Port_PinModeType Mode - port pin mode to be set         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1402  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1403  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1404  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1405  ** Return value     : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1406  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1407  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1408  **   - PORT125: Sets the port pin mode during runtime.                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1409  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1410  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1411  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1412  void Port_SetPinMode(Port_PinType Pin, Port_PinModeType Mode)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1413  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1414    /* Each Port Number for the hardware unit  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1415    uint32           PortNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1416    uint32           PinNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1417    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1418    uint32           ErrMode;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1419    uint8            ErrStatus;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1420    uint8            Direction;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1421    uint32           ConfigIndex;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1422    uint32           Index;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1423    const uint32     *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1424    #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1425    volatile uint8  *IocrRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1426    uint8            ReadMode;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1427    uint8            SetMode;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1428    Ifx_P           *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1429  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1430    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1431    IocrRegPtr = NULL_PTR;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1432    ConfigIndex = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1433    #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1434    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1435    /* Extract the port number and pin number from the Pin Symbolic ID */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1436    PortNumber = (uint32)Port_lNumber(Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1437    PinNumber  = (uint32)Port_lPinNumber(Pin);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1438  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1439    #if (PORT_DEV_ERROR_DETECT == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1440    if (Port_InitStatus != PORT_INITIALIZED)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1441    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1442      /* Report PORT_E_UNINIT DET if Port initialisation is not done
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1443      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1444      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1445        PORT_SID_SETPINMODE,PORT_E_UNINIT);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1446      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1447      ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1448    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1449    else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1450    #endif /* PORT_DEV_ERROR_DETECT == STD_ON */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1451    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1452      #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1453      /* PORT077: Function parameters are checked in the order in which they are
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1454                  passed.
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1455      */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1456      /* PORT087: Check if Pin is valid */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1457     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1458      ErrStatus = Port_lChkPin(Pin,PortNumber,PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1459      #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1460          
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1461      #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1462      if (ErrStatus == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1463      #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1464      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1465        /* Get Port Address */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1466        PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1467        /* Get the IOCR0 register address of particular port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1468        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1469            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1470        IocrRegPtr = (volatile uint8*)(volatile void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1471                     ((volatile uint32*)(volatile void*)PortAddressPtr + \ 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1472                                                   PORT_IOCR0_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1473  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1474        #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1475        for(Index = 0U; Index < PortNumber;Index++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1476        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1477          if(Port_lIsPortAvailable(Index) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1478          {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1479            ConfigIndex++; /* to identify the Index of configuration*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1480          }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1481        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1482  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1483          /* Get the config data location for specified Port */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1484        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1485          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1486        DataPtr =(const uint32*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1487                 ((Port_kConfigPtr->PortConfigSetPtr)+ConfigIndex);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1488  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1489        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1490          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1491        if ((((*(DataPtr + PORT_DATA_OFS_MODE)) & ((uint32)0x01U << PinNumber))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1492              == PORT_PIN_MODE_NOT_CHANGEABLE)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1493           )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1494        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1495          /*PORT223: Report PORT_E_MODE_UNCHANGEABLE DET if the pin is configured
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1496           as mode not changeable */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1497          #if (PORT_DEV_ERROR_DETECT == STD_ON)    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1498          Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1499            PORT_SID_SETPINMODE,PORT_E_MODE_UNCHANGEABLE);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1500          #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1501  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1502          ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1503        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1504        else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1505        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1506  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1507          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1508            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1509          Direction = *(IocrRegPtr + PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1510    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1511          ErrMode = Port_lModeErrChk(Direction, Mode, ConfigIndex, PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1512  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1513          if (ErrMode == 1U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1514          {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1515            #if (PORT_DEV_ERROR_DETECT == STD_ON)    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1516            /* Report PORT_E_PARAM_INVALID_MODE DET if pin mode is not valid */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1517            Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1518              PORT_SID_SETPINMODE,PORT_E_PARAM_INVALID_MODE);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1519            #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1520              
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1521     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1522            /*Report Safety Error if the Mode is out of range */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1523            #if (PORT_SAFETY_ENABLE == STD_ON)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1524            SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1525               PORT_SID_SETPINMODE,PORT_E_PARAM_INVALID_MODE);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1526            #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1527            
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1528            ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1529            
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1530          }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1531        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1532        #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1533      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1534    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1535    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1536    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1537    if (ErrStatus == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1538    #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1539    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1540  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1541      /*Read the IOCR register value for the Pin */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1542      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1543            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1544      ReadMode = *(IocrRegPtr + PinNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1545    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1546      /* Get the IOCR register value for new Mode */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1547      SetMode = ((ReadMode & (uint8)PORT_OUT_PIN_MASK) | (uint8)Mode);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1548  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1549      /* Set the new mode in IOCR register */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1550      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1551            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1552      *(IocrRegPtr + PinNumber) = SetMode;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1553    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1554  }/* Port_SetPinMode */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1555  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1556  #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1557  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1558  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lModeErrChk                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1559  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1560  **                      uint8 Dir,                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1561  **                      Port_PinModeType Mode,                                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1562  **                      uint32 ConfigIndex,                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1563  **                      uint32 PinNumber                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1564  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1565  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1566  ** Service ID       : NA                                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1567  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1568  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1569  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1570  ** Reentrancy       : Re-entrant                                              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1571  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1572  ** Parameters (in)  : uint8 Dir - Current direction of a pin                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1573  **                    Port_PinModeType Mode - port pin mode to be set         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1574  **                    uint32 ConfigIndex - Array Index                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1575  **                    uint32 PinNumber - port pin number                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1576  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1577  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1578  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1579  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1580  **                    0 -No error in the pin mode set                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1581  **                    1 -Error in the pin mode set                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1582  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1583  **   - Checks for the error.                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1584  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1585  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1586  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1587  IFX_LOCAL_INLINE uint32 Port_lModeErrChk
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1588  (
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1589    uint8 Dir, Port_PinModeType Mode, uint32 ConfigIndex, uint32 PinNumber
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1590  )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1591  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1592    uint32 ErrStatus;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1593  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1594    ErrStatus = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1595    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1596    /* parameter Pin is valid, check for the pin valid mode */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1597    if ((Dir & (uint8)PORT_DIR_MSK) == (uint8)PORT_PIN_IN)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1598    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1599      if (Mode != (Port_PinModeType)PORT_PIN_MODE_GPIO)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1600      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1601        ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1602      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1603    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1604    else if ( (Mode & AVAILABLE_MODE_MASK) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1605    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1606      ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1607    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1608    else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1609    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1610      uint32 Position;        /* Variables for determining if the specified*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1611      uint32 Mode_supported;  /* mode is supported or not */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1612    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1613      Position = Mode >> PORT_IOCR_PC_POS;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1614      Mode_supported = (uint32)1U << Position;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1615    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1616      /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1617          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1618      if(((uint32)(Port_kConfigPtr->
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1619                    PortPinHwSupportedModes[ConfigIndex].U[PinNumber]) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1620            Mode_supported ) == 0U
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1621        )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1622      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1623        ErrStatus = 1U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1624      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1625    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1626  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1627    return(ErrStatus);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1628  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1629  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1630  ** Syntax           : IFX_LOCAL_INLINE uint8 Port_lChkPin                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1631  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1632  **                      Port_PinType Pin,                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1633  **                      uint32 PortNo,                                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1634  **                      uint32 PinNo                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1635  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1636  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1637  ** Service ID       : NA                                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1638  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1639  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1640  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1641  ** Reentrancy       : Re-entrant                                              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1642  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1643  ** Parameters (in)  : Port_PinType Pin -  pin ID whose mode has to be set     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1644  **                    uint32 PinNo - port pin number                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1645  **                    uint32 PortNo - port number                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1646  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1647  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1648  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1649  ** Return value     : uint8                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1650  **                    0 - No error if portpin is available                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1651  **                    1 - Error if portpin is not available                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1652  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1653  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1654  **   - Checks for the error.                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1655  **   - This function is available if the PORT_SET_PIN_MODE_API is set ON      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1656  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1657  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1658  IFX_LOCAL_INLINE uint8 Port_lChkPin(Port_PinType Pin,uint32 PortNo,uint32 PinNo)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1659  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1660    uint8 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1661    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON)) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1662    uint32 PortReadOnly;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1663    uint32 PinAvailable;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1664    uint32 PortAvailable;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1665    #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1666    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1667    RetVal = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1668    #if ((PORT_DEV_ERROR_DETECT == STD_OFF) && (PORT_SAFETY_ENABLE == STD_OFF))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1669    UNUSED_PARAMETER(PortNo)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1670    UNUSED_PARAMETER(PinNo)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1671    #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1672    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1673    #if ((PORT_DEV_ERROR_DETECT == STD_ON) || (PORT_SAFETY_ENABLE == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1674      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1675    PortAvailable = Port_lIsPortAvailable(PortNo);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1676    PortReadOnly  = Port_lIsPortReadOnly(PortNo);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1677      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1678    if( PortAvailable != 0U )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1679    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1680      PinAvailable  = Port_lIsPinAvailable(PortNo,PinNo);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1681    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1682    else
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1683    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1684      /* If Port is not available, then Pin also Not available */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1685      PinAvailable = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1686    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1687  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1688  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1689    if ( (Pin > PORT_MAX_PIN_ID) ||
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1690          ((PortReadOnly != 0U) || (PinAvailable == 0U))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1691       )
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1692    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1693    #if (PORT_DEV_ERROR_DETECT == STD_ON)   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1694      /*Report PORT_E_PARAM_PIN DET if the pin is out of range */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1695      Det_ReportError((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1696        PORT_SID_SETPINMODE,PORT_E_PARAM_PIN);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1697        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1698    #endif   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1699        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1700    #if (PORT_SAFETY_ENABLE == STD_ON)   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1701      /*Report Safety Error if the pin is out of range */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1702      SafeMcal_ReportError ((uint16)PORT_MODULE_ID,PORT_INSTANCE_ID,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1703          PORT_SID_SETPINMODE,PORT_E_PARAM_PIN);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1704        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1705    #endif 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1706  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1707    RetVal = 1U;   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1708    }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1709   
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1710    #endif  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1711    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1712   return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1713      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1714  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1715  #endif /* (PORT_DEV_ERROR_DETECT == STD_ON) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1716  #endif /* (PORT_SET_PIN_MODE_API == STD_ON) */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1717  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1718  ** Traceability     : [cover parentID=DS_AS_PORT043_PORT055,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1719                         DS_AS_PORT001_PORT002_PORT041,DS_AS_PORT214,
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1720                         DS_AS_PORT042]                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1721  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1722  ** Syntax           : IFX_LOCAL_INLINE void Port_lIOInit(void)                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1723  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1724  ** [/cover]                                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1725  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1726  ** Service ID       : NA                                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1727  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1728  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1729  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1730  ** Reentrancy       : None Re-entrant                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1731  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1732  ** Parameters (in)  : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1733  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1734  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1735  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1736  ** Return value     : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1737  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1738  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1739  **   - INLINE function to initialize Port registers                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1740  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1741  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1742  IFX_LOCAL_INLINE void Port_lIOInit(void)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1743  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1744    const uint32            *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1745    const Port_n_ConfigType *ConfigDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1746    /* Each Port Number for the hardware unit */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1747    uint32                   PortNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1748    /* Each Port level for the hardware unit */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1749    uint32                   PortLevel;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1750    /* Index to identify the port configuration information
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1751    from the configuration array  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1752    uint32                   ConfigIndex;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1753    Ifx_P                   *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1754    const uint32            *LVDSDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1755    const uint32            *PCSRDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1756    volatile uint32         *LVDSRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1757    volatile uint32         *PCSRRegPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1758    uint32                   counter;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1759  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1760    /* Function call to initialize PDR registers */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1761    Port_lPDRInit();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1762  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1763    ConfigIndex = 0U;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1764  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1765    LVDSDataPtr = (const uint32*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1766                                 (Port_kConfigPtr->Port_LVDSConfigTypePtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1767      
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1768    PCSRDataPtr = (const uint32*)(const void*)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1769                                 (Port_kConfigPtr->Port_PCSRConfigTypePtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1770  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1771    /* writing P_OUT and IOCR registers */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1772    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1773    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1774  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1775      if(Port_lIsPortAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1776      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1777        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1778          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1779        ConfigDataPtr = (Port_kConfigPtr->PortConfigSetPtr) + ConfigIndex ;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1780  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1781        /* Address of each port configuration */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1782        DataPtr = (const uint32 *)(const void*)(ConfigDataPtr);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1783  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1784        PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1785  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1786        /*
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1787         PORT043: PORT055: OUT register is written before IOCR bit field to avoid
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1788         the glitches on the pin
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1789        */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1790        if(Port_lIsPortReadOnly(PortNumber) == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1791        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1792          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1793            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1794          PortLevel = (*(DataPtr + PORT_DATA_OFS_LEVEL));
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1795          PortAddressPtr->OMR.U = (uint32)Port_lPinLevel(PortLevel);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1796        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1797        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1798        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_0_3)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1799        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1800          PortAddressPtr->IOCR0.U  = *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1801        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1802        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1803            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1804        DataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1805        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1806        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_4_7) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1807        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1808          PortAddressPtr->IOCR4.U  = *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1809        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1810        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1811            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1812        DataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1813        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1814        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_8_11)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1815        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1816          PortAddressPtr->IOCR8.U  = *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1817        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1818        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1819            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1820        DataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1821        
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1822        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_12_15)!= 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1823        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1824          PortAddressPtr->IOCR12.U = *DataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1825        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1826  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1827        if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1828        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1829           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1830            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1831           LVDSRegPtr  = ((volatile uint32*)(volatile void*)PortAddressPtr + 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1832                                            PORT_LPCR_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1833           for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1834           {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1835            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1836              {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1837                Mcal_ResetENDINIT();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1838                /* LPCRn */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1839               *LVDSRegPtr = *LVDSDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1840                Mcal_SetENDINIT();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1841              }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1842              /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1843            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1844              LVDSRegPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1845              /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1846            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1847              LVDSDataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1848           }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1849        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1850  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1851        if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1852        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1853           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1854            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1855           PCSRRegPtr = ((volatile uint32*)(volatile void*)PortAddressPtr +
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1856                                           PORT_PCSR_REG_OFFSET);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1857           Mcal_ResetSafetyENDINIT_Timed(PORT_ENDINIT_TIMEOUT);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1858           /* PCSRn */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1859          *PCSRRegPtr = *PCSRDataPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1860           Mcal_SetSafetyENDINIT_Timed();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1861  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1862           /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1863            due to PBConfigStructure and is within allowed range.*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1864           PCSRDataPtr++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1865        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1866  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1867        ConfigIndex++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1868      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1869    } /* For loop */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1870  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1871    /* Initialize PORT 40 Pad Disable control register */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1872    /* Reset endinit protect */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1873    Mcal_ResetENDINIT();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1874    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1875    P40_PDISC.U = *(Port_kConfigPtr->PDiscSet);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1876    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1877    /* Set endinit protect */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1878    Mcal_SetENDINIT();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1879    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1880  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1881  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1882  ** Syntax           : IFX_LOCAL_INLINE void Port_lPDRInit(void)               **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1883  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1884  ** Service ID       : NA                                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1885  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1886  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1887  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1888  ** Reentrancy       : None Re-entrant                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1889  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1890  ** Parameters (in)  : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1891  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1892  ** Parameters (out) : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1893  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1894  ** Return value     : none                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1895  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1896  ** Description      : This function:                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1897  **   - INLINE function to initialize Port PDR registers                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1898  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1899  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1900  IFX_LOCAL_INLINE void Port_lPDRInit(void)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1901  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1902    /* Each Port Number for the hardware unit  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1903    uint32                  PortNumber;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1904    /* Index to identify the port configuration information
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1905    from the configuration array  */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1906    uint32                  ConfigIndex;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1907    Ifx_P            *PortAddressPtr;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1908  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1909    ConfigIndex = 0U;
	mov	d8,#0
.L285:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1910    /* Reset endinit protect */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1911  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1912    /* Port driver strength is configured in Port PDR0 register */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1913    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)
	mov	d9,#0
.L287:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1913    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	j	.L2
.L3:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1914    {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1915      /* Parameter Port is checked for validity */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1916      if(Port_lIsPortAvailable(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1917      {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1918        Mcal_ResetENDINIT();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1919        PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1920        /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1921          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1922        PortAddressPtr->PDR0.U =
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1923          Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength0;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1924  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1925        if(Port_lIsPortPdr1Available(PortNumber) != 0U)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1926        {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1927          PortAddressPtr = Port_lAdr(PortNumber);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1928          /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1929          due to PBConfigStructure and is within allowed range*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1930          PortAddressPtr->PDR1.U =
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1931            Port_kConfigPtr->PortConfigSetPtr[ConfigIndex].DriverStrength1;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1932        }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1933        Mcal_SetENDINIT();
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1934        ConfigIndex++;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1935      }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1936    }/* For loop */
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1937  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1938  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1939  ** Syntax           : IFX_LOCAL_INLINE Ifx_P * Port_lAdr                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1940  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1941  **                      uint32 PortNumber                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1942  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1943  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1944  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1945  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1946  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1947  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1948  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1949  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1950  ** Parameters (in)  : uint32 PortNumber                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1951  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1952  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1953  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1954  ** Return value     : Ifx_P *RetVal -Return the port adresses.                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1955  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1956  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1957  ** - The function like macro is to extract the Address of Px_OUT              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1958  **   register.                                                                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1959  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1960  IFX_LOCAL_INLINE Ifx_P * Port_lAdr(uint32 PortNumber)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1961  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1962    Ifx_P *RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1963  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1964    /*IFX_MISRA_RULE_17_04_STATUS=Pointer arithmetic is used
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1965            to efficiently access the SFRs of PORT*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1966    RetVal = ( ((Ifx_P *)(void *)&P00_OUT + 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1967                (((PortNumber / PORT_CONSTANT_10) * PORT_CONSTANT_16) +
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1968                (PortNumber % PORT_CONSTANT_10)))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1969             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1970    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1971  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1972  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1973  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1974  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1975  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable31         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1976  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1977  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1978  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1979  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1980  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1981  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1982  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1983  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1984  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1985  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1986  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1987  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1988  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1989  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1990  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1991  **                    RetVal - Value which denotes whether the port is        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1992  **                    available or not                                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1993  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1994  ** - The function like macro is to check if the port is available or not      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1995  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1996  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1997  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable31(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1998  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1999    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2000  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2001    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2002               ((uint32)PORTS_AVAILABLE_00_31)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2003             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2004    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2005  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2006  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2007  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2008  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2009  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable40         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2010  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2011  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2012  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2013  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2014  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2015  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2016  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2017  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2018  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2019  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2020  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2021  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2022  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2023  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2024  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2025  **                    RetVal - Value which denotes whether the port is        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2026  **                    available or not                                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2027  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2028  ** - The function like macro is to check if the port is available or not      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2029  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2030  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2031  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable40(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2032  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2033    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2034    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2035    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2036               ((uint32)PORTS_AVAILABLE_32_63)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2037             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2038    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2039  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2040  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2041  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2042  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2043  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2044  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2045  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2046  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2047  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2048  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2049  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2050  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2051  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2052  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2053  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2054  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2055  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2056  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2057  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2058  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2059  **                   RetVal - Value which denotes whether the port is         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2060  **                   available or not.                                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2061  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2062  ** - The function like macro is to check if the port is read only or          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2063  **   it is writable.                                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2064  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2065  IFX_LOCAL_INLINE uint32 Port_lIsPortAvailable(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2066  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2067    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2068    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :
	mov	d15,#31
.L342:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L4
.L123:
	mov	d15,#1
.L343:
	add	d0,d9,#-32
.L344:
	sh	d15,d15,d0
.L345:
	and	d15,d15,#259
.L289:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2038    return(RetVal);      (inlined)
	j	.L5

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2039  }      (inlined)
.L5:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	j	.L6
.L4:
	mov	d15,#1
.L346:
	sh	d0,d15,d9
.L347:
	ld.w	d15,.1.cnt
.L290:
	and	d15,d0
.L348:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2004    return(RetVal);      (inlined)
	j	.L7

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2005  }      (inlined)
.L7:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
.L6:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2072    return(RetVal);       (inlined)
	j	.L8

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2073  }      (inlined)
.L8:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1916      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L9
.L117:
	call	Mcal_ResetENDINIT
.L135:
	ld.w	d0,.2.cnt
.L349:
	mov	d15,#10
.L291:
	div.u	e2,d9,d15
.L350:
	mov	d15,#10
.L351:
	div.u	e4,d9,d15
	sh	d4,#4
.L352:
	add	d3,d4
	sh	d15,d3,#8
.L292:
	add	d0,d15
.L353:
	mov.a	a2,d0
.L294:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1970    return(RetVal);      (inlined)
	j	.L10

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1971  }      (inlined)
.L10:
	ld.a	a15,Port_kConfigPtr
.L354:
	ld.a	a15,[a15]
.L355:
	mul	d15,d8,#28
	addsc.a	a15,a15,d15,#0
.L356:
	ld.w	d15,[a15]20
.L140:
	st.w	[a2]64,d15
.L141:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2070              (Port_lIsPortAvailable31(Port))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2071             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2072    return(RetVal); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2073  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2074  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2075  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2076  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly31          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2077  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2078  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2079  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2080  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2081  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2082  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2083  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2084  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2085  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2086  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2087  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2088  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2089  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2090  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2091  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2092  **                    RetValue -Value which denotes whether the Port          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2093  **                    is read only or not                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2094  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2095  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2096  ** - The function like macro is to check if the port is read only or          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2097  **   it is writable.                                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2098  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2099  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly31(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2100  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2101    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2102    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2103    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) & 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2104               ((uint32)PORTS_READONLY_00_31) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2105              );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2106    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2107  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2108  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2109  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2110  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly40          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2111  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2112  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2113  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2114  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2115  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2116  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2117  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2118  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2119  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2120  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2121  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2122  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2123  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2124  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2125  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2126  **                    RetValue -Value which denotes whether the Port          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2127  **                    is read only or not                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2128  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2129  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2130  ** - The function like macro is to check if the port is read only or          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2131  **   it is writable.                                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2132  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2133  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly40(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2134  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2135    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2136  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2137    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2138               ((uint32)PORTS_READONLY_32_63)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2139              );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2140    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2141  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2142  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2143  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2144  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2145  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2146  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2147  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2148  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2149  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2150  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2151  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2152  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2153  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2154  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2155  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2156  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2157  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2158  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2159  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2160  **                    RetValue -Value which denotes whether the Port          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2161  **                    is read only or not                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2162  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2163  ** - The function like macro is to check if the port is read only or          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2164  **   it is writable.                                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2165  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2166  IFX_LOCAL_INLINE uint32 Port_lIsPortReadOnly(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2167  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2168    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2169    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2170    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) : 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2171                                           (Port_lIsPortReadOnly40(Port)) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2172              );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2173    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2174  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2175  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2176  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2177  ** Syntax           : IFX_LOCAL_INLINE uint16 Port_lIsPinAvailable            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2178  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2179  **                      uint32 Port,uint32 Pin                                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2180  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2181  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2182  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2183  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2184  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2185  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2186  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2187  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2188  ** Parameters (in)  : uint32 Port,uint32 Pin - Port and Pin to be checked     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2189  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2190  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2191  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2192  ** Return value     : uint16                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2193  **                    RetVal -Value which denotes whether the Pin is present  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2194  **                    on the Port or not.                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2195  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2196  ** - The function like macro is to check if the port pin is available or not  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2197  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2198  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2199  IFX_LOCAL_INLINE uint16 Port_lIsPinAvailable(uint32 Port,uint32 Pin)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2200  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2201    uint16 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2202    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2203    RetVal = (uint16)( ((uint32)PORT_CONSTANT_0x01 << (Pin)) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2204                        (Port_kAvailablePins[(Port)]) 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2205                     );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2206    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2207  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2208  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2209  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2210  ** Syntax           : IFX_LOCAL_INLINE uint16 Port_lIsPortPdr1Available       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2211  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2212  **                     uint32 Port                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2213  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2214  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2215  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2216  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2217  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2218  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2219  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2220  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2221  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2222  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2223  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2224  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2225  ** Return value     : uint16                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2226  **                    RetValue -Value which denotes whether PDR1 register     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2227  **                    present for the port or not                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2228  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2229  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2230  ** - The function like macro is to check if any of the port pin 8 - 15        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2231  **   is available or not for the microcontroller.                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2232  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2233  IFX_LOCAL_INLINE uint16 Port_lIsPortPdr1Available(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2234  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2235    uint16 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2236    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2237    RetVal = (uint16)(((uint32)(PORT_PDR1_MASK)) & (Port_kAvailablePins[(Port)]));
	sh	d15,d9,#1
.L357:
	movh.a	a15,#@his(Port_kAvailablePins)
	lea	a15,[a15]@los(Port_kAvailablePins)
.L358:
	addsc.a	a15,a15,d15,#0
	ld.hu	d15,[a15]0
.L359:
	mov.u	d0,#65280
.L293:
	and	d15,d0
.L360:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2238    return(RetVal);      (inlined)
	j	.L11

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2239  }      (inlined)
.L11:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1925        if(Port_lIsPortPdr1Available(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L12
.L144:
	ld.w	d0,.2.cnt
.L361:
	mov	d15,#10
.L296:
	div.u	e2,d9,d15
.L362:
	mov	d15,#10
.L363:
	div.u	e4,d9,d15
	sh	d4,#4
.L364:
	add	d3,d4
	sh	d15,d3,#8
.L297:
	add	d0,d15
.L365:
	mov.a	a2,d0
.L295:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1970    return(RetVal);      (inlined)
	j	.L13

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1971  }      (inlined)
.L13:
	ld.a	a15,Port_kConfigPtr
.L366:
	ld.a	a15,[a15]
.L367:
	mul	d15,d8,#28
	addsc.a	a15,a15,d15,#0
.L368:
	ld.w	d15,[a15]24
.L151:
	st.w	[a2]68,d15

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1925        if(Port_lIsPortPdr1Available(PortNumber) != 0U)      (inlined)
.L12:
	call	Mcal_SetENDINIT
.L369:
	add	d8,#1

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1916      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
.L9:
	add	d9,#1

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1913    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)      (inlined)
.L2:
	mov	d15,#40
.L370:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1913    for (PortNumber = 0U; PortNumber < PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	jlt.u	d9,d15,.L3
.L111:
	mov	d8,#0
.L286:
	ld.a	a15,Port_kConfigPtr
.L371:
	ld.a	a12,[a15]8
.L298:
	ld.a	a15,Port_kConfigPtr
.L372:
	ld.a	a13,[a15]12
.L299:
	mov	d9,#0
.L288:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1772    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	j	.L14
.L15:
	mov	d15,#31
.L373:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L16
.L155:
	mov	d15,#1
.L374:
	add	d0,d9,#-32
.L375:
	sh	d15,d15,d0
.L376:
	and	d15,d15,#259
.L300:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2038    return(RetVal);      (inlined)
	j	.L17

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2039  }      (inlined)
.L17:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	j	.L18
.L16:
	mov	d15,#1
.L377:
	sh	d0,d15,d9
.L378:
	ld.w	d15,.1.cnt
.L301:
	and	d15,d0
.L379:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2004    return(RetVal);      (inlined)
	j	.L19

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2005  }      (inlined)
.L19:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
.L18:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2072    return(RetVal);       (inlined)
	j	.L20

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2073  }      (inlined)
.L20:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1775      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L21
.L153:
	ld.a	a15,Port_kConfigPtr
.L380:
	ld.a	a15,[a15]
.L381:
	mul	d15,d8,#28
.L302:
	addsc.a	a4,a15,d15,#0
.L159:
	ld.w	d0,.2.cnt
.L382:
	mov	d15,#10
.L383:
	div.u	e2,d9,d15
.L384:
	mov	d15,#10
.L385:
	div.u	e4,d9,d15
	sh	d4,#4
.L386:
	add	d3,d4
	sh	d15,d3,#8
.L303:
	add	d0,d15
.L387:
	mov.a	a15,d0
.L305:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1970    return(RetVal);      (inlined)
	j	.L22

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1971  }      (inlined)
.L22:
	mov	d15,#31
.L388:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2170    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :       (inlined)
	jlt.u	d15,d9,.L23
.L177:
	mov	d15,#0
.L306:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2106    return(RetVal);      (inlined)
	j	.L24

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2107  }      (inlined)
.L24:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2170    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :       (inlined)
	j	.L25
.L23:
	mov	d15,#1
.L389:
	add	d0,d9,#-32
.L304:
	sh	d15,d15,d0
.L390:
	and	d15,d15,#256
.L307:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2140    return(RetVal);      (inlined)
	j	.L26

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2141  }      (inlined)
.L26:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2170    RetVal = ((Port <= PORT_NUMBER_31) ? (Port_lIsPortReadOnly31(Port)) :       (inlined)
.L25:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2173    return(RetVal);      (inlined)
	j	.L27

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2174  }      (inlined)
.L27:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1790        if(Port_lIsPortReadOnly(PortNumber) == 0U)      (inlined)
	jne	d15,#0,.L28
.L171:
	ld.w	d15,[a4]16
.L189:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2238    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2239  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2240  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2241  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2242  ** Syntax           : IFX_LOCAL_INLINE uint16 Port_lIsPortIocrAvailable       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2243  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2244  **                      uint32 Port,uint16 Pin                                **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2245  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2246  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2247  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2248  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2249  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2250  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2251  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2252  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2253  ** Parameters (in)  : uint32 Port,uint16 Pin - Port and Pin to be checked     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2254  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2255  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2256  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2257  ** Return value     : uint16                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2258  **                    RetValue -Value which denotes whether Iocr register     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2259  **                    is available or not for the microcontroller             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2260  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2261  ** - The function like macro is to check if the IOCRx register for the port   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2262  **   is available or not for the microcontroller.                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2263  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2264  IFX_LOCAL_INLINE uint16 Port_lIsPortIocrAvailable(uint32 Port,uint16 Pin)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2265  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2266    uint16 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2267    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2268    RetVal = (uint16)( ((uint32)(Pin)) & (Port_kAvailablePins[(Port)]) );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2269    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2270  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2271  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2272  #if((PORT_SET_PIN_DIRECTION_API == STD_ON) || (PORT_SET_PIN_MODE_API == STD_ON))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2273  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2274  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lNumber                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2275  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2276  **                      Port_PinType pin                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2277  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2278  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2279  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2280  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2281  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2282  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2283  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2284  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2285  ** Parameters (in)  : Port_PinType Pin                                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2286  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2287  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2288  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2289  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2290  **                    RetValue -Value which denotes port number extracted     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2291  **                    from pin symbolic ID                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2292  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2293  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2294  ** - Defines to extract port number Port_PinType data, bit4 to bit 11 (8 bit) **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2295  **   represents the Port Number, to get that value Right shifted              **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2296  **   by 4 and Mask with 0xFF                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2297  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2298  IFX_LOCAL_INLINE uint32 Port_lNumber(Port_PinType Pin)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2299  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2300     uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2301     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2302     RetVal = (((Pin) >> PORT_NUMBER_OFFSET) & PORT_NUM_LOW8_MASK);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2303     return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2304  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2305  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2306  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2307  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lPinNumber                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2308  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2309  **                      Port_PinType pin                                      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2310  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2311  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2312  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2313  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2314  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2315  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2316  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2317  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2318  ** Parameters (in)  : Port_PinType Pin                                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2319  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2320  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2321  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2322  * Return value     : uint32                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2323  **                   RetValue -Value which denotes pin number extracted       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2324  **                   from pin symbolic ID                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2325  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2326  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2327  **  -Defines to extract pin number from Port_PinType data                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2328  **   least significant 4-bit represents the Pin Number, to get that           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2329  **   value Masked with 0x0F                                                   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2330  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2331  IFX_LOCAL_INLINE uint32 Port_lPinNumber(Port_PinType Pin)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2332  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2333     uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2334     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2335     RetVal = ((Pin) & PORT_PIN_LOW4_MASK);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2336     
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2337     return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2338  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2339  #endif
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2340  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2341  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2342  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lPinLevel                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2343  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2344  **                      uint32 level                                          **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2345  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2346  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2347  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2348  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2349  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2350  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2351  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2352  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2353  ** Parameters (in)  : uint32 Level                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2354  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2355  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2356  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2357  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2358  **                    RetVal - Value to be set for the OMR register           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2359  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2360  ** -OMR register value to set the configured initial level                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2361  **  To get the port pin level Masked with 0x0000FFFFU and left shited by 16   **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2362  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2363  IFX_LOCAL_INLINE uint32 Port_lPinLevel(uint32 Level)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2364  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2365    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2366    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2367    RetVal = ((((~(Level)) & PORT_LOWER_16BIT_MASK) << PORT_16BIT_SHIFTVALUE) |
	mov	d0,#-1
	xor	d0,d15
.L391:
	insert	d0,d0,#0,#16,#16
.L392:
	sh	d0,d0,#16
.L308:
	or	d0,d15
.L393:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2371    return(RetVal);      (inlined)
	j	.L29

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2372  }      (inlined)
.L29:
	st.w	[a15]4,d0

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1790        if(Port_lIsPortReadOnly(PortNumber) == 0U)      (inlined)
.L28:
	mov	d0,#15
.L195:
	sh	d15,d9,#1
.L394:
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L395:
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]0
.L310:
	and	d0,d15
.L309:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2269    return(RetVal);      (inlined)
	j	.L30

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2270  }      (inlined)
.L30:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1798        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_0_3)!= 0U)      (inlined)
	jeq	d0,#0,.L31
.L196:
	ld.w	d15,[a4]
.L161:
	st.w	[a15]16,d15

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1798        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_0_3)!= 0U)      (inlined)
.L31:
	add.a	a4,#4
.L396:
	mov	d0,#240
.L203:
	sh	d15,d9,#1
.L397:
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L398:
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]0
.L312:
	and	d0,d15
.L311:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2269    return(RetVal);      (inlined)
	j	.L32

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2270  }      (inlined)
.L32:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1806        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_4_7) != 0U)      (inlined)
	jeq	d0,#0,.L33
.L204:
	ld.w	d15,[a4]
.L162:
	st.w	[a15]20,d15

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1806        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_4_7) != 0U)      (inlined)
.L33:
	add.a	a4,#4
.L399:
	mov	d0,#3840
.L206:
	sh	d15,d9,#1
.L400:
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L401:
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]0
.L314:
	and	d0,d15
.L313:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2269    return(RetVal);      (inlined)
	j	.L34

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2270  }      (inlined)
.L34:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1814        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_8_11)!= 0U)      (inlined)
	jeq	d0,#0,.L35
.L207:
	ld.w	d15,[a4]
.L163:
	st.w	[a15]24,d15

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1814        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_8_11)!= 0U)      (inlined)
.L35:
	add.a	a4,#4
.L402:
	mov.u	d0,#61440
.L209:
	sh	d15,d9,#1
.L403:
	movh.a	a2,#@his(Port_kAvailablePins)
	lea	a2,[a2]@los(Port_kAvailablePins)
.L404:
	addsc.a	a2,a2,d15,#0
	ld.hu	d15,[a2]0
.L316:
	and	d0,d15
.L315:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2269    return(RetVal);      (inlined)
	j	.L36

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2270  }      (inlined)
.L36:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1822        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_12_15)!= 0U)      (inlined)
	jeq	d0,#0,.L37
.L210:
	ld.w	d15,[a4]
.L164:
	st.w	[a15]28,d15

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1822        if(Port_lIsPortIocrAvailable(PortNumber,(uint16)PORT_PIN_12_15)!= 0U)      (inlined)
.L37:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2368                (Level)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2369             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2370  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2371    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2372  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2373  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2374  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2375  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2376  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2377  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2378  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2379  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2380  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2381  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2382  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2383  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2384  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2385  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2386  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2387  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2388  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2389  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2390  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2391  **                    RetValue -Value which denotes whether Port supports LVDS**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2392  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2393  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2394  ** - The function like macro is to check if the port supports LVDS            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2395  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2396  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2397  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable31(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2398  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2399    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2400  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2401    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2402               ((uint32)PORTS_LVDS_00_31)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2403             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2404    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2405  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2406  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2407  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2408  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable40     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2409  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2410  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2411  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2412  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2413  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2414  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2415  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2416  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2417  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2418  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2419  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2420  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2421  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2422  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2423  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2424  **                    RetValue -Value which denotes whether Port supports LVDS**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2425  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2426  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2427  ** - The function like macro is to check if the port supports LVDS            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2428  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2429  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2430  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable40(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2431  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2432    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2433    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2434    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) & 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2435               ((uint32)PORTS_LVDS_32_40)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2436             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2437    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2438  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2439  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2440  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2441  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2442  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2443  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2444  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2445  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2446  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2447  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2448  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2449  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2450  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2451  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2452  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2453  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2454  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2455  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2456  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2457  **                    RetValue -Value which denotes whether Port supports LVDS**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2458  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2459  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2460  ** - The function like macro is to check if the port supports LVDS            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2461  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2462  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2463  IFX_LOCAL_INLINE uint32 Port_lIsPortLVDSAvailable(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2464  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2465    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2466    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2467    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :
	mov	d15,#31
.L405:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2467    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L38
.L218:
	mov	d15,#0
.L318:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2437    return(RetVal);      (inlined)
	j	.L39

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2438  }      (inlined)
.L39:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2467    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :      (inlined)
	j	.L40
.L38:
	mov	d15,#1
.L406:
	sh	d0,d15,d9
.L317:
	ld.w	d15,.3.cnt
.L319:
	and	d15,d0
.L407:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2404    return(RetVal);      (inlined)
	j	.L41

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2405  }      (inlined)
.L41:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2467    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortLVDSAvailable40(Port)) :      (inlined)
.L40:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2470    return(RetVal);       (inlined)
	j	.L42

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2471  }      (inlined)
.L42:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1827        if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L43
.L165:
	lea	a14,[a15]160
.L166:
	mov	d10,#0
.L320:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1833           for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)      (inlined)
	j	.L44
.L45:
	ld.w	d15,[a12]
.L230:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2468              (Port_lIsPortLVDSAvailable31(Port))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2469             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2470    return(RetVal); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2471  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2472  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2473  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2474  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2475  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2476  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2477  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2478  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2479  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2480  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2481  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2482  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2483  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2484  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2485  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2486  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2487  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2488  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2489  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2490  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2491  **                    RetValue -Value which denotes whether Port supports PCSR**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2492  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2493  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2494  ** - The function like macro is to check if the port supports PCSR            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2495  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2496  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2497  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable31(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2498  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2499    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2500  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2501    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port)) &
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2502               ((uint32)PORTS_PCSR_00_31)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2503             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2504    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2505  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2506  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2507  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2508  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable40     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2509  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2510  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2511  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2512  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2513  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2514  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2515  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2516  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2517  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2518  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2519  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2520  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2521  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2522  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2523  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2524  **                    RetValue -Value which denotes whether Port supports PCSR**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2525  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2526  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2527  ** - The function like macro is to check if the port supports PCSR            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2528  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2529  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2530  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable40(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2531  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2532    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2533    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2534    RetVal = ( ((uint32)(PORT_CONSTANT_0x01) << (Port - PORT_NUMBER_32)) & 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2535               ((uint32)PORTS_PCSR_32_63)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2536             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2537    return(RetVal);
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2538  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2539  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2540  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2541  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2542  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2543  **                      uint32 Port                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2544  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2545  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2546  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2547  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2548  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2549  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2550  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2551  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2552  ** Parameters (in)  : uint32 Port - Port to be checked                        **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2553  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2554  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2555  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2556  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2557  **                    RetValue -Value which denotes whether Port supports PCSR**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2558  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2559  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2560  ** - The function like macro is to check if the port supports PCSR            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2561  **   for the microcontroller.                                                 **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2562  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2563  IFX_LOCAL_INLINE uint32 Port_lIsPortPCSRAvailable(uint32 Port)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2564  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2565    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2566    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2567    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2568              (Port_lIsPortPCSRAvailable31(Port))
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2569             );
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2570    return(RetVal); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2571  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2572  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2573  /*******************************************************************************
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2574  ** Syntax           : IFX_LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2575  **                    (                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2576  **                      uint32 PortLPCRvalue                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2577  **                    )                                                       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2578  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2579  ** Service ID       : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2580  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2581  ** Sync/Async       : Synchronous                                             **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2582  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2583  ** Reentrancy       : Non reentrant                                           **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2584  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2585  ** Parameters (in)  : uint32 PortLPCRvalue - Port LPCR Reg value to be checked**
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2586  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2587  ** Parameters (out) : None                                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2588  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2589  ** Return value     : uint32                                                  **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2590  **                    RetVal -Value which denotes the LVDS configuration      **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2591  **                    for the PortPinPair.                                    **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2592  **                                                                            **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2593  ** Description      :                                                         **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2594  ** - The function like macro is to check if the portpinpair for lvds is       **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2595  **     avialable for the microcontroller.                                     **
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2596  *******************************************************************************/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2597  IFX_LOCAL_INLINE uint32 Port_lIsPortPinPairAvailable(uint32 PortLPCRvalue)
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2598  {
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2599    uint32 RetVal;
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2600    
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2601    RetVal = ( (PortLPCRvalue >> (uint32)16) & 0xFFFFU );
	sh	d15,d15,#-16
.L321:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2602    return(RetVal);       (inlined)
	j	.L46

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2603  }      (inlined)
.L46:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1835            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)      (inlined)
	jne	d15,#0,.L47
.L231:
	call	Mcal_ResetENDINIT
.L408:
	ld.w	d15,[a12]
.L322:
	st.w	[a14],d15
.L409:
	call	Mcal_SetENDINIT

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1835            if(Port_lIsPortPinPairAvailable(*LVDSDataPtr) == 0U)      (inlined)
.L47:
	add.a	a14,#4
.L410:
	add.a	a12,#4
.L411:
	add	d10,#1

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1833           for(counter = 0U; (counter < PORT_MAX_LPCR_REG); counter++)      (inlined)
.L44:
	jlt.u	d10,#3,.L45

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1827        if(Port_lIsPortLVDSAvailable(PortNumber) != 0U)      (inlined)
.L43:
	mov	d15,#31
.L412:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2567    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :      (inlined)
	jge.u	d15,d9,.L48
.L242:
	mov	d15,#1
.L413:
	add	d0,d9,#-32
.L414:
	sh	d15,d15,d0
.L415:
	and	d15,d15,#256
.L323:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2537    return(RetVal);      (inlined)
	j	.L49

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2538  }      (inlined)
.L49:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2567    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :      (inlined)
	j	.L50
.L48:
	mov	d15,#1
.L416:
	sh	d0,d15,d9
.L417:
	mov	d15,#2049
.L324:
	and	d15,d0
.L418:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2504    return(RetVal);      (inlined)
	j	.L51

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2505  }      (inlined)
.L51:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2567    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortPCSRAvailable40(Port)) :      (inlined)
.L50:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2570    return(RetVal);       (inlined)
	j	.L52

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2571  }      (inlined)
.L52:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1851        if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)      (inlined)
	jeq	d15,#0,.L53
.L167:
	lea	a15,[a15]100
.L168:
	ld.w	d4,.4.cnt
	call	Mcal_ResetSafetyENDINIT_Timed
.L419:
	ld.w	d15,[a13]
.L325:
	st.w	[a15],d15
.L420:
	call	Mcal_SetSafetyENDINIT_Timed
.L421:
	add.a	a13,#4

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1851        if(Port_lIsPortPCSRAvailable(PortNumber) != 0U)      (inlined)
.L53:
	add	d8,#1

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1775      if(Port_lIsPortAvailable(PortNumber) != 0U)      (inlined)
.L21:
	add	d9,#1

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1772    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)      (inlined)
.L14:
	mov	d15,#40
.L422:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1772    for (PortNumber = 0U; PortNumber <= PORT_MAX_NUMBER ; PortNumber++)      (inlined)
	jge.u	d15,d9,.L15
.L423:
	call	Mcal_ResetENDINIT
.L424:
	ld.a	a15,Port_kConfigPtr
.L425:
	ld.a	a15,[a15]4
.L426:
	ld.hu	d15,[a15]0
.L427:
	movh.a	a15,#61444
	st.w	[a15]@los(0xf003e060),d15
.L428:
	call	Mcal_SetENDINIT
.L92:
	ret
.L87:
	
__Port_Init_function_end:
	.size	Port_Init,__Port_Init_function_end-Port_Init
.L77:
	; End of function
	
	.sdecl	'.text.Shared.DEFAULT_CODE_ROM',code,cluster('Port_RefreshPortDirection')
	.sect	'.text.Shared.DEFAULT_CODE_ROM'
	.align	2
	
	.global	Port_RefreshPortDirection
; Function Port_RefreshPortDirection
.L68:
Port_RefreshPortDirection:	.type	func
	mov	d1,#0
.L326:
	mov	d4,#0
.L54:
	mov	d15,#31
.L433:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	jge.u	d15,d1,.L55
.L266:
	mov	d15,#1
.L434:
	add	d0,d1,#-32
.L435:
	sh	d15,d15,d0
.L436:
	and	d15,d15,#259
.L327:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2038    return(RetVal);      (inlined)
	j	.L56

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2039  }      (inlined)
.L56:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
	j	.L57
.L55:
	mov	d15,#1
.L437:
	sh	d0,d15,d1
.L438:
	ld.w	d15,.1.cnt
.L328:
	and	d15,d0
.L439:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2004    return(RetVal);      (inlined)
	j	.L58

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2005  }      (inlined)
.L58:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2069    RetVal = ((Port > PORT_NUMBER_31) ? (Port_lIsPortAvailable40(Port)) :      (inlined)
.L57:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2072    return(RetVal);       (inlined)
	j	.L59

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2073  }      (inlined)
.L59:
	jeq	d15,#0,.L60
.L263:
	ld.a	a15,Port_kConfigPtr
.L440:
	ld.a	a15,[a15]
.L441:
	mul	d15,d4,#28
.L329:
	addsc.a	a15,a15,d15,#0
.L272:
	ld.w	d0,.2.cnt
.L442:
	mov	d15,#10
.L443:
	div.u	e2,d1,d15
.L444:
	mov	d15,#10
.L445:
	div.u	e6,d1,d15
	sh	d6,#4
.L446:
	add	d3,d6
	sh	d15,d3,#8
.L330:
	add	d0,d15
.L447:
	mov.a	a2,d0
.L331:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1970    return(RetVal);      (inlined)
	j	.L61

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  1971  }      (inlined)
.L61:
	lea	a2,[a2]16
.L273:
	mov	d2,#0
.L62:
	mov	d0,#1
.L448:
	sh	d0,d0,d2
.L449:
	sh	d15,d1,#1
.L450:
	movh.a	a4,#@his(Port_kAvailablePins)
	lea	a4,[a4]@los(Port_kAvailablePins)
.L451:
	addsc.a	a4,a4,d15,#0
	ld.hu	d15,[a4]0
.L452:
	and	d0,d15
.L453:
	extr.u	d15,d0,#0,#16
.L332:

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2206    return(RetVal);      (inlined)
	j	.L63

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2207  }      (inlined)
.L63:
	jeq	d15,#0,.L64
.L277:
	ld.bu	d15,[a15]
.L333:
	st.b	[a2],d15
.L64:
	add.a	a2,#1
.L454:
	add.a	a15,#1
.L455:
	add	d2,#1
.L456:
	mov	d15,#15
.L457:
	jge.u	d15,d2,.L62
.L458:
	add	d4,#1
.L60:
	add	d1,#1
.L459:
	mov	d15,#40
.L460:
	jge.u	d15,d1,.L54
.L461:
	ret
.L253:
	
__Port_RefreshPortDirection_function_end:
	.size	Port_RefreshPortDirection,__Port_RefreshPortDirection_function_end-Port_RefreshPortDirection
.L82:
	; End of function
	
	.sdecl	'.rodata.Shared.DEFAULT_CONST_16BIT',data,rom,cluster('Port_kAvailablePins')
	.sect	'.rodata.Shared.DEFAULT_CONST_16BIT'
	.align	4
Port_kAvailablePins:	.type	object
	.size	Port_kAvailablePins,82
	.half	8191
	.space	2
	.half	511
	.space	14
	.half	511,7756
	.space	2
	.half	15,2047,511
	.space	8
	.half	32719,255,15,63
	.space	16
	.half	29,16383
	.space	12
	.half	1023
	.sdecl	'.zbss.Port.Port_kConfigPtr',data,cluster('Port_kConfigPtr')
	.sect	'.zbss.Port.Port_kConfigPtr'
	.align	4
Port_kConfigPtr:	.type	object
	.size	Port_kConfigPtr,4
	.space	4
	.calls	'Port_Init','Mcal_ResetENDINIT'
	.calls	'Port_Init','Mcal_SetENDINIT'
	.calls	'Port_Init','Mcal_ResetSafetyENDINIT_Timed'
	.calls	'Port_Init','Mcal_SetSafetyENDINIT_Timed'
	.calls	'Port_Init','',0
	.extern	Mcal_ResetENDINIT
	.extern	Mcal_SetENDINIT
	.extern	Mcal_ResetSafetyENDINIT_Timed
	.extern	Mcal_SetSafetyENDINIT_Timed
	.calls	'Port_RefreshPortDirection','',0
	.sdecl	'.debug_info',debug
	.sect	'.debug_info'
.L70:
	.word	12795
	.half	3
	.word	.L71
	.byte	4
.L69:
	.byte	1
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\Debug\\',0,1,1
	.word	.L72
.L90:
	.byte	2
	.byte	'Port_lIOInit',0,3,1,206,13,23,1,1
.L93:
	.byte	3,4,4,4,4,4,4,4,4,4,4,4,4,0,0
.L110:
	.byte	2
	.byte	'Port_lPDRInit',0,3,1,236,14,23,1,1
.L112:
	.byte	3,4,4,4,4,0,0,5
	.byte	'_Ifx_P',0,2,228,5,25,128,2,6,2,180,5,9,4,7
	.byte	'unsigned int',0,4,7,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,7
	.byte	'int',0,4,5,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OUT_Bits',0,2,143,3,16,4,7
	.byte	'unsigned char',0,1,8,9
	.byte	'P0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'P1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'P2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'P3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'P4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'P5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'P6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'P7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'P8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'P9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'P10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'P11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'P12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'P13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'P14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'P15',0,1
	.word	312
	.byte	1,0,2,35,1
.L148:
	.byte	7
	.byte	'unsigned short int',0,2,7,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	290
	.byte	2,35,0,0,8
	.byte	'OUT',0,4
	.word	239
	.byte	2,35,0,6,2,132,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMR_Bits',0,2,169,2,16,4,9
	.byte	'PS0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'PS1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'PS2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'PS3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'PS4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'PS5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'PS6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'PS7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'PS8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'PS9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'PS10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'PS11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'PS12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'PS13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'PS14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'PS15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'PCL0',0,1
	.word	312
	.byte	1,7,2,35,2,9
	.byte	'PCL1',0,1
	.word	312
	.byte	1,6,2,35,2,9
	.byte	'PCL2',0,1
	.word	312
	.byte	1,5,2,35,2,9
	.byte	'PCL3',0,1
	.word	312
	.byte	1,4,2,35,2,9
	.byte	'PCL4',0,1
	.word	312
	.byte	1,3,2,35,2,9
	.byte	'PCL5',0,1
	.word	312
	.byte	1,2,2,35,2,9
	.byte	'PCL6',0,1
	.word	312
	.byte	1,1,2,35,2,9
	.byte	'PCL7',0,1
	.word	312
	.byte	1,0,2,35,2,9
	.byte	'PCL8',0,1
	.word	312
	.byte	1,7,2,35,3,9
	.byte	'PCL9',0,1
	.word	312
	.byte	1,6,2,35,3,9
	.byte	'PCL10',0,1
	.word	312
	.byte	1,5,2,35,3,9
	.byte	'PCL11',0,1
	.word	312
	.byte	1,4,2,35,3,9
	.byte	'PCL12',0,1
	.word	312
	.byte	1,3,2,35,3,9
	.byte	'PCL13',0,1
	.word	312
	.byte	1,2,2,35,3,9
	.byte	'PCL14',0,1
	.word	312
	.byte	1,1,2,35,3,9
	.byte	'PCL15',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	658
	.byte	2,35,0,0,8
	.byte	'OMR',0,4
	.word	630
	.byte	2,35,4,6,2,147,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_ID_Bits',0,2,110,16,4,9
	.byte	'MODREV',0,1
	.word	312
	.byte	8,0,2,35,0,9
	.byte	'MODTYPE',0,1
	.word	312
	.byte	8,0,2,35,1,9
	.byte	'MODNUMBER',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	1242
	.byte	2,35,0,0,8
	.byte	'ID',0,4
	.word	1214
	.byte	2,35,8,10,4
	.word	312
	.byte	11,3,0,8
	.byte	'reserved_C',0,4
	.word	1345
	.byte	2,35,12,6,2,163,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_IOCR0_Bits',0,2,140,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	3,5,2,35,0,9
	.byte	'PC0',0,1
	.word	312
	.byte	5,0,2,35,0,9
	.byte	'reserved_8',0,1
	.word	312
	.byte	3,5,2,35,1,9
	.byte	'PC1',0,1
	.word	312
	.byte	5,0,2,35,1,9
	.byte	'reserved_16',0,1
	.word	312
	.byte	3,5,2,35,2,9
	.byte	'PC2',0,1
	.word	312
	.byte	5,0,2,35,2,9
	.byte	'reserved_24',0,1
	.word	312
	.byte	3,5,2,35,3,9
	.byte	'PC3',0,1
	.word	312
	.byte	5,0,2,35,3,0,8
	.byte	'B',0,4
	.word	1402
	.byte	2,35,0,0,8
	.byte	'IOCR0',0,4
	.word	1374
	.byte	2,35,16,6,2,179,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_IOCR4_Bits',0,2,166,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	3,5,2,35,0,9
	.byte	'PC4',0,1
	.word	312
	.byte	5,0,2,35,0,9
	.byte	'reserved_8',0,1
	.word	312
	.byte	3,5,2,35,1,9
	.byte	'PC5',0,1
	.word	312
	.byte	5,0,2,35,1,9
	.byte	'reserved_16',0,1
	.word	312
	.byte	3,5,2,35,2,9
	.byte	'PC6',0,1
	.word	312
	.byte	5,0,2,35,2,9
	.byte	'reserved_24',0,1
	.word	312
	.byte	3,5,2,35,3,9
	.byte	'PC7',0,1
	.word	312
	.byte	5,0,2,35,3,0,8
	.byte	'B',0,4
	.word	1632
	.byte	2,35,0,0,8
	.byte	'IOCR4',0,4
	.word	1604
	.byte	2,35,20,6,2,187,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_IOCR8_Bits',0,2,179,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	3,5,2,35,0,9
	.byte	'PC8',0,1
	.word	312
	.byte	5,0,2,35,0,9
	.byte	'reserved_8',0,1
	.word	312
	.byte	3,5,2,35,1,9
	.byte	'PC9',0,1
	.word	312
	.byte	5,0,2,35,1,9
	.byte	'reserved_16',0,1
	.word	312
	.byte	3,5,2,35,2,9
	.byte	'PC10',0,1
	.word	312
	.byte	5,0,2,35,2,9
	.byte	'reserved_24',0,1
	.word	312
	.byte	3,5,2,35,3,9
	.byte	'PC11',0,1
	.word	312
	.byte	5,0,2,35,3,0,8
	.byte	'B',0,4
	.word	1862
	.byte	2,35,0,0,8
	.byte	'IOCR8',0,4
	.word	1834
	.byte	2,35,24,6,2,171,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_IOCR12_Bits',0,2,153,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	3,5,2,35,0,9
	.byte	'PC12',0,1
	.word	312
	.byte	5,0,2,35,0,9
	.byte	'reserved_8',0,1
	.word	312
	.byte	3,5,2,35,1,9
	.byte	'PC13',0,1
	.word	312
	.byte	5,0,2,35,1,9
	.byte	'reserved_16',0,1
	.word	312
	.byte	3,5,2,35,2,9
	.byte	'PC14',0,1
	.word	312
	.byte	5,0,2,35,2,9
	.byte	'reserved_24',0,1
	.word	312
	.byte	3,5,2,35,3,9
	.byte	'PC15',0,1
	.word	312
	.byte	5,0,2,35,3,0,8
	.byte	'B',0,4
	.word	2094
	.byte	2,35,0,0,8
	.byte	'IOCR12',0,4
	.word	2066
	.byte	2,35,28,8
	.byte	'reserved_20',0,4
	.word	1345
	.byte	2,35,32,6,2,155,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_IN_Bits',0,2,118,16,4,9
	.byte	'P0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'P1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'P2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'P3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'P4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'P5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'P6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'P7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'P8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'P9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'P10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'P11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'P12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'P13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'P14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'P15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	2351
	.byte	2,35,0,0,8
	.byte	'IN',0,4
	.word	2323
	.byte	2,35,36,10,24
	.word	312
	.byte	11,23,0,8
	.byte	'reserved_28',0,24
	.word	2649
	.byte	2,35,40,6,2,204,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_PDR0_Bits',0,2,204,3,16,4,9
	.byte	'PD0',0,1
	.word	312
	.byte	3,5,2,35,0,9
	.byte	'PL0',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'PD1',0,1
	.word	312
	.byte	3,1,2,35,0,9
	.byte	'PL1',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'PD2',0,1
	.word	312
	.byte	3,5,2,35,1,9
	.byte	'PL2',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'PD3',0,1
	.word	312
	.byte	3,1,2,35,1,9
	.byte	'PL3',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'PD4',0,1
	.word	312
	.byte	3,5,2,35,2,9
	.byte	'PL4',0,1
	.word	312
	.byte	1,4,2,35,2,9
	.byte	'PD5',0,1
	.word	312
	.byte	3,1,2,35,2,9
	.byte	'PL5',0,1
	.word	312
	.byte	1,0,2,35,2,9
	.byte	'PD6',0,1
	.word	312
	.byte	3,5,2,35,3,9
	.byte	'PL6',0,1
	.word	312
	.byte	1,4,2,35,3,9
	.byte	'PD7',0,1
	.word	312
	.byte	3,1,2,35,3,9
	.byte	'PL7',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	2707
	.byte	2,35,0,0,8
	.byte	'PDR0',0,4
	.word	2679
	.byte	2,35,64,6,2,212,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_PDR1_Bits',0,2,225,3,16,4,9
	.byte	'PD8',0,1
	.word	312
	.byte	3,5,2,35,0,9
	.byte	'PL8',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'PD9',0,1
	.word	312
	.byte	3,1,2,35,0,9
	.byte	'PL9',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'PD10',0,1
	.word	312
	.byte	3,5,2,35,1,9
	.byte	'PL10',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'PD11',0,1
	.word	312
	.byte	3,1,2,35,1,9
	.byte	'PL11',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'PD12',0,1
	.word	312
	.byte	3,5,2,35,2,9
	.byte	'PL12',0,1
	.word	312
	.byte	1,4,2,35,2,9
	.byte	'PD13',0,1
	.word	312
	.byte	3,1,2,35,2,9
	.byte	'PL13',0,1
	.word	312
	.byte	1,0,2,35,2,9
	.byte	'PD14',0,1
	.word	312
	.byte	3,5,2,35,3,9
	.byte	'PL14',0,1
	.word	312
	.byte	1,4,2,35,3,9
	.byte	'PD15',0,1
	.word	312
	.byte	3,1,2,35,3,9
	.byte	'PL15',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	3025
	.byte	2,35,0,0,8
	.byte	'PDR1',0,4
	.word	2997
	.byte	2,35,68,10,8
	.word	312
	.byte	11,7,0,8
	.byte	'reserved_48',0,8
	.word	3327
	.byte	2,35,72,6,2,139,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_ESR_Bits',0,2,88,16,4,9
	.byte	'EN0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'EN1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'EN2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'EN3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'EN4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'EN5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'EN6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'EN7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'EN8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'EN9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'EN10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'EN11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'EN12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'EN13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'EN14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'EN15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	3385
	.byte	2,35,0,0,8
	.byte	'ESR',0,4
	.word	3357
	.byte	2,35,80,10,12
	.word	312
	.byte	11,11,0,8
	.byte	'reserved_54',0,12
	.word	3701
	.byte	2,35,84,6,2,196,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_PDISC_Bits',0,2,182,3,16,4,9
	.byte	'PDIS0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'PDIS1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'PDIS2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'PDIS3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'PDIS4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'PDIS5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'PDIS6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'PDIS7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'PDIS8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'PDIS9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'PDIS10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'PDIS11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'PDIS12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'PDIS13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'PDIS14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'PDIS15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	3759
	.byte	2,35,0,0,8
	.byte	'PDISC',0,4
	.word	3731
	.byte	2,35,96,6,2,188,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_PCSR_Bits',0,2,165,3,16,4,9
	.byte	'SEL0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'SEL1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'SEL2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'SEL3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'SEL4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'SEL5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'SEL6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'reserved_7',0,2
	.word	559
	.byte	3,6,2,35,0,9
	.byte	'SEL10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'SEL11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'reserved_12',0,4
	.word	245
	.byte	19,1,2,35,2,9
	.byte	'LCK',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	4140
	.byte	2,35,0,0,8
	.byte	'PCSR',0,4
	.word	4112
	.byte	2,35,100,8
	.byte	'reserved_68',0,8
	.word	3327
	.byte	2,35,104,6,2,148,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMSR0_Bits',0,2,206,2,16,4,9
	.byte	'PS0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'PS1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'PS2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'PS3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'reserved_4',0,4
	.word	245
	.byte	28,0,2,35,2,0,8
	.byte	'B',0,4
	.word	4445
	.byte	2,35,0,0,8
	.byte	'OMSR0',0,4
	.word	4417
	.byte	2,35,112,6,2,164,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMSR4_Bits',0,2,227,2,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	4,4,2,35,0,9
	.byte	'PS4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'PS5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'PS6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'PS7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'reserved_8',0,4
	.word	245
	.byte	24,0,2,35,2,0,8
	.byte	'B',0,4
	.word	4607
	.byte	2,35,0,0,8
	.byte	'OMSR4',0,4
	.word	4579
	.byte	2,35,116,6,2,172,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMSR8_Bits',0,2,238,2,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	8,0,2,35,0,9
	.byte	'PS8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'PS9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'PS10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'PS11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'reserved_12',0,4
	.word	245
	.byte	20,0,2,35,2,0,8
	.byte	'B',0,4
	.word	4791
	.byte	2,35,0,0,8
	.byte	'OMSR8',0,4
	.word	4763
	.byte	2,35,120,6,2,156,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMSR12_Bits',0,2,216,2,16,4,9
	.byte	'reserved_0',0,2
	.word	559
	.byte	12,4,2,35,0,9
	.byte	'PS12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'PS13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'PS14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'PS15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	4978
	.byte	2,35,0,0,8
	.byte	'OMSR12',0,4
	.word	4950
	.byte	2,35,124,6,2,228,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMCR0_Bits',0,2,232,1,16,4,9
	.byte	'reserved_0',0,2
	.word	559
	.byte	16,0,2,35,0,9
	.byte	'PCL0',0,1
	.word	312
	.byte	1,7,2,35,2,9
	.byte	'PCL1',0,1
	.word	312
	.byte	1,6,2,35,2,9
	.byte	'PCL2',0,1
	.word	312
	.byte	1,5,2,35,2,9
	.byte	'PCL3',0,1
	.word	312
	.byte	1,4,2,35,2,9
	.byte	'reserved_20',0,2
	.word	559
	.byte	12,0,2,35,2,0,8
	.byte	'B',0,4
	.word	5169
	.byte	2,35,0,0,8
	.byte	'OMCR0',0,4
	.word	5141
	.byte	3,35,128,1,6,2,244,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMCR4_Bits',0,2,253,1,16,4,9
	.byte	'reserved_0',0,4
	.word	245
	.byte	20,12,2,35,2,9
	.byte	'PCL4',0,1
	.word	312
	.byte	1,3,2,35,2,9
	.byte	'PCL5',0,1
	.word	312
	.byte	1,2,2,35,2,9
	.byte	'PCL6',0,1
	.word	312
	.byte	1,1,2,35,2,9
	.byte	'PCL7',0,1
	.word	312
	.byte	1,0,2,35,2,9
	.byte	'reserved_24',0,1
	.word	312
	.byte	8,0,2,35,3,0,8
	.byte	'B',0,4
	.word	5359
	.byte	2,35,0,0,8
	.byte	'OMCR4',0,4
	.word	5331
	.byte	3,35,132,1,6,2,252,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMCR8_Bits',0,2,136,2,16,4,9
	.byte	'reserved_0',0,4
	.word	245
	.byte	24,8,2,35,2,9
	.byte	'PCL8',0,1
	.word	312
	.byte	1,7,2,35,3,9
	.byte	'PCL9',0,1
	.word	312
	.byte	1,6,2,35,3,9
	.byte	'PCL10',0,1
	.word	312
	.byte	1,5,2,35,3,9
	.byte	'PCL11',0,1
	.word	312
	.byte	1,4,2,35,3,9
	.byte	'reserved_28',0,1
	.word	312
	.byte	4,0,2,35,3,0,8
	.byte	'B',0,4
	.word	5549
	.byte	2,35,0,0,8
	.byte	'OMCR8',0,4
	.word	5521
	.byte	3,35,136,1,6,2,236,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMCR12_Bits',0,2,243,1,16,4,9
	.byte	'reserved_0',0,4
	.word	245
	.byte	28,4,2,35,2,9
	.byte	'PCL12',0,1
	.word	312
	.byte	1,3,2,35,3,9
	.byte	'PCL13',0,1
	.word	312
	.byte	1,2,2,35,3,9
	.byte	'PCL14',0,1
	.word	312
	.byte	1,1,2,35,3,9
	.byte	'PCL15',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	5741
	.byte	2,35,0,0,8
	.byte	'OMCR12',0,4
	.word	5713
	.byte	3,35,140,1,6,2,140,5,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMSR_Bits',0,2,249,2,16,4,9
	.byte	'PS0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'PS1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'PS2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'PS3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'PS4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'PS5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'PS6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'PS7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'PS8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'PS9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'PS10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'PS11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'PS12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'PS13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'PS14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'PS15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	5914
	.byte	2,35,0,0,8
	.byte	'OMSR',0,4
	.word	5886
	.byte	3,35,144,1,6,2,220,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_OMCR_Bits',0,2,147,2,16,4,9
	.byte	'reserved_0',0,2
	.word	559
	.byte	16,0,2,35,0,9
	.byte	'PCL0',0,1
	.word	312
	.byte	1,7,2,35,2,9
	.byte	'PCL1',0,1
	.word	312
	.byte	1,6,2,35,2,9
	.byte	'PCL2',0,1
	.word	312
	.byte	1,5,2,35,2,9
	.byte	'PCL3',0,1
	.word	312
	.byte	1,4,2,35,2,9
	.byte	'PCL4',0,1
	.word	312
	.byte	1,3,2,35,2,9
	.byte	'PCL5',0,1
	.word	312
	.byte	1,2,2,35,2,9
	.byte	'PCL6',0,1
	.word	312
	.byte	1,1,2,35,2,9
	.byte	'PCL7',0,1
	.word	312
	.byte	1,0,2,35,2,9
	.byte	'PCL8',0,1
	.word	312
	.byte	1,7,2,35,3,9
	.byte	'PCL9',0,1
	.word	312
	.byte	1,6,2,35,3,9
	.byte	'PCL10',0,1
	.word	312
	.byte	1,5,2,35,3,9
	.byte	'PCL11',0,1
	.word	312
	.byte	1,4,2,35,3,9
	.byte	'PCL12',0,1
	.word	312
	.byte	1,3,2,35,3,9
	.byte	'PCL13',0,1
	.word	312
	.byte	1,2,2,35,3,9
	.byte	'PCL14',0,1
	.word	312
	.byte	1,1,2,35,3,9
	.byte	'PCL15',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	6262
	.byte	2,35,0,0,8
	.byte	'OMCR',0,4
	.word	6234
	.byte	3,35,148,1,8
	.byte	'reserved_98',0,8
	.word	3327
	.byte	3,35,152,1,6,2,195,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_LPCR0_Bits',0,2,192,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'PS1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'reserved_2',0,4
	.word	245
	.byte	30,0,2,35,2,0,8
	.byte	'B',0,4
	.word	6647
	.byte	2,35,0,0,8
	.byte	'LPCR0',0,4
	.word	6619
	.byte	3,35,160,1,6,2,203,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_LPCR1_Bits',0,2,200,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'PS1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'reserved_2',0,4
	.word	245
	.byte	30,0,2,35,2,0,8
	.byte	'B',0,4
	.word	6787
	.byte	2,35,0,5
	.byte	'_Ifx_P_LPCR1_P21_Bits',0,2,208,1,16,4,9
	.byte	'RDIS_CTRL',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'RX_DIS',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'TERM',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'LRXTERM',0,1
	.word	312
	.byte	5,0,2,35,0,9
	.byte	'reserved_8',0,4
	.word	245
	.byte	24,0,2,35,2,0,8
	.byte	'B_P21',0,4
	.word	6882
	.byte	2,35,0,0,8
	.byte	'LPCR1',0,4
	.word	6759
	.byte	3,35,164,1,6,2,212,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_LPCR2_Bits',0,2,218,1,16,4,9
	.byte	'reserved_0',0,1
	.word	312
	.byte	8,0,2,35,0,9
	.byte	'LVDSR',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'LVDSRL',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'reserved_10',0,1
	.word	312
	.byte	2,4,2,35,1,9
	.byte	'TDIS_CTRL',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'TX_DIS',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'TX_PD',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'TX_PWDPD',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'reserved_16',0,2
	.word	559
	.byte	16,0,2,35,2,0,8
	.byte	'B',0,4
	.word	7067
	.byte	2,35,0,0,8
	.byte	'LPCR2',0,4
	.word	7039
	.byte	3,35,168,1,10,76
	.word	312
	.byte	11,75,0,8
	.byte	'reserved_A4',0,76
	.word	7299
	.byte	3,35,172,1,6,2,131,4,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_ACCEN1_Bits',0,2,82,16,4,9
	.byte	'reserved_0',0,4
	.word	245
	.byte	32,0,2,35,2,0,8
	.byte	'B',0,4
	.word	7358
	.byte	2,35,0,0,8
	.byte	'ACCEN1',0,4
	.word	7330
	.byte	3,35,248,1,6,2,251,3,9,4,8
	.byte	'U',0,4
	.word	245
	.byte	2,35,0,8
	.byte	'I',0,4
	.word	272
	.byte	2,35,0,5
	.byte	'_Ifx_P_ACCEN0_Bits',0,2,45,16,4,9
	.byte	'EN0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'EN1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'EN2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'EN3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'EN4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'EN5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'EN6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'EN7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'EN8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'EN9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'EN10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'EN11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'EN12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'EN13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'EN14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'EN15',0,1
	.word	312
	.byte	1,0,2,35,1,9
	.byte	'EN16',0,1
	.word	312
	.byte	1,7,2,35,2,9
	.byte	'EN17',0,1
	.word	312
	.byte	1,6,2,35,2,9
	.byte	'EN18',0,1
	.word	312
	.byte	1,5,2,35,2,9
	.byte	'EN19',0,1
	.word	312
	.byte	1,4,2,35,2,9
	.byte	'EN20',0,1
	.word	312
	.byte	1,3,2,35,2,9
	.byte	'EN21',0,1
	.word	312
	.byte	1,2,2,35,2,9
	.byte	'EN22',0,1
	.word	312
	.byte	1,1,2,35,2,9
	.byte	'EN23',0,1
	.word	312
	.byte	1,0,2,35,2,9
	.byte	'EN24',0,1
	.word	312
	.byte	1,7,2,35,3,9
	.byte	'EN25',0,1
	.word	312
	.byte	1,6,2,35,3,9
	.byte	'EN26',0,1
	.word	312
	.byte	1,5,2,35,3,9
	.byte	'EN27',0,1
	.word	312
	.byte	1,4,2,35,3,9
	.byte	'EN28',0,1
	.word	312
	.byte	1,3,2,35,3,9
	.byte	'EN29',0,1
	.word	312
	.byte	1,2,2,35,3,9
	.byte	'EN30',0,1
	.word	312
	.byte	1,1,2,35,3,9
	.byte	'EN31',0,1
	.word	312
	.byte	1,0,2,35,3,0,8
	.byte	'B',0,4
	.word	7462
	.byte	2,35,0,0,8
	.byte	'ACCEN0',0,4
	.word	7434
	.byte	3,35,252,1,0,12
	.word	225
.L102:
	.byte	13
	.word	8019
.L134:
	.byte	14
	.byte	'Port_lAdr',0,3,1,168,15,26
	.word	8024
	.byte	1,1
.L98:
	.byte	7
	.byte	'unsigned long int',0,4,7
.L136:
	.byte	15
	.byte	'PortNumber',0,1,168,15,43
	.word	8051
.L138:
	.byte	4,0
.L128:
	.byte	14
	.byte	'Port_lIsPortAvailable31',0,3,1,205,15,25
	.word	8051
	.byte	1,1
.L129:
	.byte	15
	.byte	'Port',0,1,205,15,56
	.word	8051
.L131:
	.byte	4,0
.L122:
	.byte	14
	.byte	'Port_lIsPortAvailable40',0,3,1,239,15,25
	.word	8051
	.byte	1,1
.L124:
	.byte	15
	.byte	'Port',0,1,239,15,56
	.word	8051
.L126:
	.byte	4,0
.L116:
	.byte	14
	.byte	'Port_lIsPortAvailable',0,3,1,145,16,25
	.word	8051
	.byte	1,1
.L118:
	.byte	15
	.byte	'Port',0,1,145,16,54
	.word	8051
.L120:
	.byte	3,4,4,0,0
.L176:
	.byte	14
	.byte	'Port_lIsPortReadOnly31',0,3,1,179,16,25
	.word	8051
	.byte	1,1
.L178:
	.byte	15
	.byte	'Port',0,1,179,16,55
	.word	8051
.L180:
	.byte	4,0
.L182:
	.byte	14
	.byte	'Port_lIsPortReadOnly40',0,3,1,213,16,25
	.word	8051
	.byte	1,1
.L183:
	.byte	15
	.byte	'Port',0,1,213,16,55
	.word	8051
.L185:
	.byte	4,0
.L170:
	.byte	14
	.byte	'Port_lIsPortReadOnly',0,3,1,246,16,25
	.word	8051
	.byte	1,1
.L172:
	.byte	15
	.byte	'Port',0,1,246,16,53
	.word	8051
.L174:
	.byte	3,4,4,0,0
.L276:
	.byte	14
	.byte	'Port_lIsPinAvailable',0,3,1,151,17,25
	.word	559
	.byte	1,1
.L278:
	.byte	15
	.byte	'Port',0,1,151,17,53
	.word	8051
.L280:
	.byte	15
	.byte	'Pin',0,1,151,17,65
	.word	8051
.L282:
	.byte	4,0
.L143:
	.byte	14
	.byte	'Port_lIsPortPdr1Available',0,3,1,185,17,25
	.word	559
	.byte	1,1
.L145:
	.byte	15
	.byte	'Port',0,1,185,17,58
	.word	8051
.L147:
	.byte	4,0
.L194:
	.byte	14
	.byte	'Port_lIsPortIocrAvailable',0,3,1,216,17,25
	.word	559
	.byte	1,1
.L197:
	.byte	15
	.byte	'Port',0,1,216,17,58
	.word	8051
.L199:
	.byte	15
	.byte	'Pin',0,1,216,17,70
	.word	559
.L201:
	.byte	4,0
.L188:
	.byte	14
	.byte	'Port_lPinLevel',0,3,1,187,18,25
	.word	8051
	.byte	1,1
.L190:
	.byte	15
	.byte	'Level',0,1,187,18,47
	.word	8051
.L192:
	.byte	4,0
.L223:
	.byte	14
	.byte	'Port_lIsPortLVDSAvailable31',0,3,1,221,18,25
	.word	8051
	.byte	1,1
.L224:
	.byte	15
	.byte	'Port',0,1,221,18,60
	.word	8051
.L226:
	.byte	4,0
.L217:
	.byte	14
	.byte	'Port_lIsPortLVDSAvailable40',0,3,1,254,18,25
	.word	8051
	.byte	1,1
.L219:
	.byte	15
	.byte	'Port',0,1,254,18,60
	.word	8051
.L221:
	.byte	4,0
.L212:
	.byte	14
	.byte	'Port_lIsPortLVDSAvailable',0,3,1,159,19,25
	.word	8051
	.byte	1,1
.L213:
	.byte	15
	.byte	'Port',0,1,159,19,58
	.word	8051
.L215:
	.byte	3,4,4,0,0
.L247:
	.byte	14
	.byte	'Port_lIsPortPCSRAvailable31',0,3,1,193,19,25
	.word	8051
	.byte	1,1
.L248:
	.byte	15
	.byte	'Port',0,1,193,19,60
	.word	8051
.L250:
	.byte	4,0
.L241:
	.byte	14
	.byte	'Port_lIsPortPCSRAvailable40',0,3,1,226,19,25
	.word	8051
	.byte	1,1
.L243:
	.byte	15
	.byte	'Port',0,1,226,19,60
	.word	8051
.L245:
	.byte	4,0
.L236:
	.byte	14
	.byte	'Port_lIsPortPCSRAvailable',0,3,1,131,20,25
	.word	8051
	.byte	1,1
.L237:
	.byte	15
	.byte	'Port',0,1,131,20,58
	.word	8051
.L239:
	.byte	3,4,4,0,0
.L229:
	.byte	14
	.byte	'Port_lIsPortPinPairAvailable',0,3,1,165,20,25
	.word	8051
	.byte	1,1
.L232:
	.byte	15
	.byte	'PortLPCRvalue',0,1,165,20,61
	.word	8051
.L234:
	.byte	4,0,16
	.byte	'Mcal_ResetENDINIT',0,3,115,13,1,1,1,1,16
	.byte	'Mcal_SetENDINIT',0,3,142,1,13,1,1,1,1,17
	.byte	'Mcal_ResetSafetyENDINIT_Timed',0,3,186,2,13,1,1,1,1,15
	.byte	'TimeOut',0,3,186,2,50
	.word	8051
	.byte	0,16
	.byte	'Mcal_SetSafetyENDINIT_Timed',0,3,210,2,13,1,1,1,1,5
	.byte	'Port_ConfigType',0,4,218,2,16,16,5
	.byte	'Port_n_ConfigType',0,4,155,2,16,28,18
	.byte	'Port_n_ControlType',0,4,221,1,15,16,19,4,223,1,3,16,8
	.byte	'PC0',0,1
	.word	312
	.byte	2,35,0,8
	.byte	'PC1',0,1
	.word	312
	.byte	2,35,1,8
	.byte	'PC2',0,1
	.word	312
	.byte	2,35,2,8
	.byte	'PC3',0,1
	.word	312
	.byte	2,35,3,8
	.byte	'PC4',0,1
	.word	312
	.byte	2,35,4,8
	.byte	'PC5',0,1
	.word	312
	.byte	2,35,5,8
	.byte	'PC6',0,1
	.word	312
	.byte	2,35,6,8
	.byte	'PC7',0,1
	.word	312
	.byte	2,35,7,8
	.byte	'PC8',0,1
	.word	312
	.byte	2,35,8,8
	.byte	'PC9',0,1
	.word	312
	.byte	2,35,9,8
	.byte	'PC10',0,1
	.word	312
	.byte	2,35,10,8
	.byte	'PC11',0,1
	.word	312
	.byte	2,35,11,8
	.byte	'PC12',0,1
	.word	312
	.byte	2,35,12,8
	.byte	'PC13',0,1
	.word	312
	.byte	2,35,13,8
	.byte	'PC14',0,1
	.word	312
	.byte	2,35,14,8
	.byte	'PC15',0,1
	.word	312
	.byte	2,35,15,0,8
	.byte	'B',0,16
	.word	9252
	.byte	2,35,0,10,16
	.word	8051
	.byte	11,3,0,8
	.byte	'U',0,16
	.word	9484
	.byte	2,35,0,0,8
	.byte	'PinControl',0,16
	.word	9227
	.byte	2,35,0,18
	.byte	'Port_n_PinType',0,4,191,1,15,4,19,4,193,1,3,2,9
	.byte	'P0',0,1
	.word	312
	.byte	1,7,2,35,0,9
	.byte	'P1',0,1
	.word	312
	.byte	1,6,2,35,0,9
	.byte	'P2',0,1
	.word	312
	.byte	1,5,2,35,0,9
	.byte	'P3',0,1
	.word	312
	.byte	1,4,2,35,0,9
	.byte	'P4',0,1
	.word	312
	.byte	1,3,2,35,0,9
	.byte	'P5',0,1
	.word	312
	.byte	1,2,2,35,0,9
	.byte	'P6',0,1
	.word	312
	.byte	1,1,2,35,0,9
	.byte	'P7',0,1
	.word	312
	.byte	1,0,2,35,0,9
	.byte	'P8',0,1
	.word	312
	.byte	1,7,2,35,1,9
	.byte	'P9',0,1
	.word	312
	.byte	1,6,2,35,1,9
	.byte	'P10',0,1
	.word	312
	.byte	1,5,2,35,1,9
	.byte	'P11',0,1
	.word	312
	.byte	1,4,2,35,1,9
	.byte	'P12',0,1
	.word	312
	.byte	1,3,2,35,1,9
	.byte	'P13',0,1
	.word	312
	.byte	1,2,2,35,1,9
	.byte	'P14',0,1
	.word	312
	.byte	1,1,2,35,1,9
	.byte	'P15',0,1
	.word	312
	.byte	1,0,2,35,1,0,8
	.byte	'B',0,2
	.word	9546
	.byte	2,35,0,8
	.byte	'U',0,4
	.word	8051
	.byte	2,35,0,0,8
	.byte	'PinLevel',0,4
	.word	9525
	.byte	2,35,16,8
	.byte	'DriverStrength0',0,4
	.word	8051
	.byte	2,35,20,8
	.byte	'DriverStrength1',0,4
	.word	8051
	.byte	2,35,24,0,20
	.word	9203
.L96:
	.byte	13
	.word	9875
	.byte	8
	.byte	'PortConfigSetPtr',0,4
	.word	9880
	.byte	2,35,0,20
	.word	559
	.byte	13
	.word	9911
	.byte	8
	.byte	'PDiscSet',0,4
	.word	9916
	.byte	2,35,4,5
	.byte	'Port_n_LVDSConfigType',0,4,182,2,16,12,8
	.byte	'LPCR0',0,4
	.word	8051
	.byte	2,35,0,8
	.byte	'LPCR1',0,4
	.word	8051
	.byte	2,35,4,8
	.byte	'LPCR2',0,4
	.word	8051
	.byte	2,35,8,0,20
	.word	9939
	.byte	13
	.word	10013
	.byte	8
	.byte	'Port_LVDSConfigTypePtr',0,4
	.word	10018
	.byte	2,35,8,20
	.word	8051
	.byte	13
	.word	10055
	.byte	8
	.byte	'Port_PCSRConfigTypePtr',0,4
	.word	10060
	.byte	2,35,12,0,20
	.word	9181
.L88:
	.byte	13
	.word	10098
	.byte	20
	.word	8051
.L94:
	.byte	13
	.word	10108
	.byte	12
	.word	8051
.L106:
	.byte	13
	.word	10118
	.byte	20
	.word	312
.L258:
	.byte	13
	.word	10128
	.byte	12
	.word	312
.L260:
	.byte	13
	.word	10138
	.byte	21
	.word	160
	.byte	3,22
	.word	8970
	.byte	23
	.word	9011
	.byte	24
	.word	9034
	.byte	0,4,22
	.word	8521
	.byte	23
	.word	8559
	.byte	23
	.word	8573
	.byte	24
	.word	8586
	.byte	0,4,22
	.word	8521
	.byte	23
	.word	8559
	.byte	23
	.word	8573
	.byte	24
	.word	8586
	.byte	0,4,22
	.word	8521
	.byte	23
	.word	8559
	.byte	23
	.word	8573
	.byte	24
	.word	8586
	.byte	0,4,22
	.word	8521
	.byte	23
	.word	8559
	.byte	23
	.word	8573
	.byte	24
	.word	8586
	.byte	0,4,22
	.word	8588
	.byte	23
	.word	8615
	.byte	24
	.word	8630
	.byte	0,4,22
	.word	8029
	.byte	23
	.word	8072
	.byte	24
	.word	8092
	.byte	0,4,22
	.word	8198
	.byte	23
	.word	8232
	.byte	25
	.word	8246
	.byte	22
	.word	8094
	.byte	23
	.word	8130
	.byte	24
	.word	8144
	.byte	0,24
	.word	8247
	.byte	22
	.word	8146
	.byte	23
	.word	8182
	.byte	24
	.word	8196
	.byte	0,24
	.word	8248
	.byte	0,0,4,22
	.word	8353
	.byte	23
	.word	8386
	.byte	25
	.word	8400
	.byte	22
	.word	8251
	.byte	23
	.word	8286
	.byte	24
	.word	8300
	.byte	0,24
	.word	8401
	.byte	22
	.word	8302
	.byte	23
	.word	8337
	.byte	24
	.word	8351
	.byte	0,24
	.word	8402
	.byte	0,0,4,22
	.word	8744
	.byte	23
	.word	8782
	.byte	25
	.word	8796
	.byte	22
	.word	8688
	.byte	23
	.word	8728
	.byte	24
	.word	8742
	.byte	0,24
	.word	8797
	.byte	22
	.word	8632
	.byte	23
	.word	8672
	.byte	24
	.word	8686
	.byte	0,24
	.word	8798
	.byte	0,0,4,22
	.word	196
	.byte	25
	.word	218
	.byte	22
	.word	8467
	.byte	23
	.word	8505
	.byte	24
	.word	8519
	.byte	0,24
	.word	219
	.byte	22
	.word	8029
	.byte	23
	.word	8072
	.byte	24
	.word	8092
	.byte	0,24
	.word	220
	.byte	22
	.word	8029
	.byte	23
	.word	8072
	.byte	24
	.word	8092
	.byte	0,24
	.word	221
	.byte	22
	.word	8198
	.byte	23
	.word	8232
	.byte	25
	.word	8246
	.byte	22
	.word	8094
	.byte	23
	.word	8130
	.byte	24
	.word	8144
	.byte	0,24
	.word	8247
	.byte	22
	.word	8146
	.byte	23
	.word	8182
	.byte	24
	.word	8196
	.byte	0,24
	.word	8248
	.byte	0,0,24
	.word	222
	.byte	0,0,4,22
	.word	8913
	.byte	23
	.word	8951
	.byte	25
	.word	8965
	.byte	22
	.word	8801
	.byte	23
	.word	8841
	.byte	24
	.word	8855
	.byte	0,24
	.word	8966
	.byte	22
	.word	8857
	.byte	23
	.word	8897
	.byte	24
	.word	8911
	.byte	0,24
	.word	8967
	.byte	0,0,4,0,0,21
	.word	196
	.byte	3,22
	.word	8467
	.byte	23
	.word	8505
	.byte	24
	.word	8519
	.byte	0,4,22
	.word	8029
	.byte	23
	.word	8072
	.byte	24
	.word	8092
	.byte	0,4,22
	.word	8029
	.byte	23
	.word	8072
	.byte	24
	.word	8092
	.byte	0,4,22
	.word	8198
	.byte	23
	.word	8232
	.byte	25
	.word	8246
	.byte	22
	.word	8094
	.byte	23
	.word	8130
	.byte	24
	.word	8144
	.byte	0,24
	.word	8247
	.byte	22
	.word	8146
	.byte	23
	.word	8182
	.byte	24
	.word	8196
	.byte	0,24
	.word	8248
	.byte	0,0,4,0,0,21
	.word	8029
	.byte	23
	.word	8072
	.byte	4,0,21
	.word	8094
	.byte	23
	.word	8130
	.byte	4,0,21
	.word	8146
	.byte	23
	.word	8182
	.byte	4,0,21
	.word	8198
	.byte	23
	.word	8232
	.byte	3,22
	.word	8094
	.byte	23
	.word	8130
	.byte	24
	.word	8144
	.byte	0,4,22
	.word	8146
	.byte	23
	.word	8182
	.byte	24
	.word	8196
	.byte	0,4,0,0,21
	.word	8251
	.byte	23
	.word	8286
	.byte	4,0,21
	.word	8302
	.byte	23
	.word	8337
	.byte	4,0,21
	.word	8353
	.byte	23
	.word	8386
	.byte	3,22
	.word	8251
	.byte	23
	.word	8286
	.byte	24
	.word	8300
	.byte	0,4,22
	.word	8302
	.byte	23
	.word	8337
	.byte	24
	.word	8351
	.byte	0,4,0,0,21
	.word	8405
	.byte	23
	.word	8438
	.byte	23
	.word	8452
	.byte	4,0,21
	.word	8467
	.byte	23
	.word	8505
	.byte	4,0,21
	.word	8521
	.byte	23
	.word	8559
	.byte	23
	.word	8573
	.byte	4,0,21
	.word	8588
	.byte	23
	.word	8615
	.byte	4,0,21
	.word	8632
	.byte	23
	.word	8672
	.byte	4,0,21
	.word	8688
	.byte	23
	.word	8728
	.byte	4,0,21
	.word	8744
	.byte	23
	.word	8782
	.byte	3,22
	.word	8688
	.byte	23
	.word	8728
	.byte	24
	.word	8742
	.byte	0,4,22
	.word	8632
	.byte	23
	.word	8672
	.byte	24
	.word	8686
	.byte	0,4,0,0,21
	.word	8801
	.byte	23
	.word	8841
	.byte	4,0,21
	.word	8857
	.byte	23
	.word	8897
	.byte	4,0,21
	.word	8913
	.byte	23
	.word	8951
	.byte	3,22
	.word	8801
	.byte	23
	.word	8841
	.byte	24
	.word	8855
	.byte	0,4,22
	.word	8857
	.byte	23
	.word	8897
	.byte	24
	.word	8911
	.byte	0,4,0,0,21
	.word	8970
	.byte	23
	.word	9011
	.byte	4,0,26
	.byte	'void',0,13
	.word	11160
	.byte	27
	.byte	'__prof_adm',0,1,1,1
	.word	11166
	.byte	28,1,13
	.word	11190
	.byte	27
	.byte	'__codeptr',0,1,1,1
	.word	11192
	.byte	27
	.byte	'Ifx_P_ACCEN0_Bits',0,2,79,3
	.word	7462
	.byte	27
	.byte	'Ifx_P_ACCEN1_Bits',0,2,85,3
	.word	7358
	.byte	27
	.byte	'Ifx_P_ESR_Bits',0,2,107,3
	.word	3385
	.byte	27
	.byte	'Ifx_P_ID_Bits',0,2,115,3
	.word	1242
	.byte	27
	.byte	'Ifx_P_IN_Bits',0,2,137,1,3
	.word	2351
	.byte	27
	.byte	'Ifx_P_IOCR0_Bits',0,2,150,1,3
	.word	1402
	.byte	27
	.byte	'Ifx_P_IOCR12_Bits',0,2,163,1,3
	.word	2094
	.byte	27
	.byte	'Ifx_P_IOCR4_Bits',0,2,176,1,3
	.word	1632
	.byte	27
	.byte	'Ifx_P_IOCR8_Bits',0,2,189,1,3
	.word	1862
	.byte	27
	.byte	'Ifx_P_LPCR0_Bits',0,2,197,1,3
	.word	6647
	.byte	27
	.byte	'Ifx_P_LPCR1_Bits',0,2,205,1,3
	.word	6787
	.byte	27
	.byte	'Ifx_P_LPCR1_P21_Bits',0,2,215,1,3
	.word	6882
	.byte	27
	.byte	'Ifx_P_LPCR2_Bits',0,2,229,1,3
	.word	7067
	.byte	27
	.byte	'Ifx_P_OMCR0_Bits',0,2,240,1,3
	.word	5169
	.byte	27
	.byte	'Ifx_P_OMCR12_Bits',0,2,250,1,3
	.word	5741
	.byte	27
	.byte	'Ifx_P_OMCR4_Bits',0,2,133,2,3
	.word	5359
	.byte	27
	.byte	'Ifx_P_OMCR8_Bits',0,2,144,2,3
	.word	5549
	.byte	27
	.byte	'Ifx_P_OMCR_Bits',0,2,166,2,3
	.word	6262
	.byte	27
	.byte	'Ifx_P_OMR_Bits',0,2,203,2,3
	.word	658
	.byte	27
	.byte	'Ifx_P_OMSR0_Bits',0,2,213,2,3
	.word	4445
	.byte	27
	.byte	'Ifx_P_OMSR12_Bits',0,2,224,2,3
	.word	4978
	.byte	27
	.byte	'Ifx_P_OMSR4_Bits',0,2,235,2,3
	.word	4607
	.byte	27
	.byte	'Ifx_P_OMSR8_Bits',0,2,246,2,3
	.word	4791
	.byte	27
	.byte	'Ifx_P_OMSR_Bits',0,2,140,3,3
	.word	5914
	.byte	27
	.byte	'Ifx_P_OUT_Bits',0,2,162,3,3
	.word	290
	.byte	27
	.byte	'Ifx_P_PCSR_Bits',0,2,179,3,3
	.word	4140
	.byte	27
	.byte	'Ifx_P_PDISC_Bits',0,2,201,3,3
	.word	3759
	.byte	27
	.byte	'Ifx_P_PDR0_Bits',0,2,222,3,3
	.word	2707
	.byte	27
	.byte	'Ifx_P_PDR1_Bits',0,2,243,3,3
	.word	3025
	.byte	27
	.byte	'Ifx_P_ACCEN0',0,2,128,4,3
	.word	7434
	.byte	27
	.byte	'Ifx_P_ACCEN1',0,2,136,4,3
	.word	7330
	.byte	27
	.byte	'Ifx_P_ESR',0,2,144,4,3
	.word	3357
	.byte	27
	.byte	'Ifx_P_ID',0,2,152,4,3
	.word	1214
	.byte	27
	.byte	'Ifx_P_IN',0,2,160,4,3
	.word	2323
	.byte	27
	.byte	'Ifx_P_IOCR0',0,2,168,4,3
	.word	1374
	.byte	27
	.byte	'Ifx_P_IOCR12',0,2,176,4,3
	.word	2066
	.byte	27
	.byte	'Ifx_P_IOCR4',0,2,184,4,3
	.word	1604
	.byte	27
	.byte	'Ifx_P_IOCR8',0,2,192,4,3
	.word	1834
	.byte	27
	.byte	'Ifx_P_LPCR0',0,2,200,4,3
	.word	6619
	.byte	27
	.byte	'Ifx_P_LPCR1',0,2,209,4,3
	.word	6759
	.byte	27
	.byte	'Ifx_P_LPCR2',0,2,217,4,3
	.word	7039
	.byte	27
	.byte	'Ifx_P_OMCR',0,2,225,4,3
	.word	6234
	.byte	27
	.byte	'Ifx_P_OMCR0',0,2,233,4,3
	.word	5141
	.byte	27
	.byte	'Ifx_P_OMCR12',0,2,241,4,3
	.word	5713
	.byte	27
	.byte	'Ifx_P_OMCR4',0,2,249,4,3
	.word	5331
	.byte	27
	.byte	'Ifx_P_OMCR8',0,2,129,5,3
	.word	5521
	.byte	27
	.byte	'Ifx_P_OMR',0,2,137,5,3
	.word	630
	.byte	27
	.byte	'Ifx_P_OMSR',0,2,145,5,3
	.word	5886
	.byte	27
	.byte	'Ifx_P_OMSR0',0,2,153,5,3
	.word	4417
	.byte	27
	.byte	'Ifx_P_OMSR12',0,2,161,5,3
	.word	4950
	.byte	27
	.byte	'Ifx_P_OMSR4',0,2,169,5,3
	.word	4579
	.byte	27
	.byte	'Ifx_P_OMSR8',0,2,177,5,3
	.word	4763
	.byte	27
	.byte	'Ifx_P_OUT',0,2,185,5,3
	.word	239
	.byte	27
	.byte	'Ifx_P_PCSR',0,2,193,5,3
	.word	4112
	.byte	27
	.byte	'Ifx_P_PDISC',0,2,201,5,3
	.word	3731
	.byte	27
	.byte	'Ifx_P_PDR0',0,2,209,5,3
	.word	2679
	.byte	27
	.byte	'Ifx_P_PDR1',0,2,217,5,3
	.word	2997
	.byte	12
	.word	225
	.byte	27
	.byte	'Ifx_P',0,2,138,6,3
	.word	12533
	.byte	27
	.byte	'uint8',0,5,90,29
	.word	312
	.byte	27
	.byte	'uint16',0,5,92,29
	.word	559
	.byte	27
	.byte	'uint32',0,5,94,29
	.word	8051
	.byte	27
	.byte	'unsigned_int',0,6,115,22
	.word	245
	.byte	27
	.byte	'Port_n_PinType',0,4,218,1,3
	.word	9525
	.byte	27
	.byte	'Port_n_ControlType',0,4,248,1,2
	.word	9227
	.byte	27
	.byte	'Port_n_ConfigType',0,4,179,2,2
	.word	9203
	.byte	27
	.byte	'Port_n_LVDSConfigType',0,4,206,2,2
	.word	9939
	.byte	27
	.byte	'Port_n_PCSRConfigType',0,4,209,2,16
	.word	8051
	.byte	27
	.byte	'Port_ConfigType',0,4,238,2,2
	.word	9181
	.byte	10,82
	.word	559
	.byte	11,40,0
.L284:
	.byte	20
	.word	12784
	.byte	0
	.sdecl	'.debug_abbrev',debug
	.sect	'.debug_abbrev'
.L71:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,16,6,0,0,2,46,1,3,8,32,13,58,15,59,15,57,15,54,15,39,12,0,0,3,11
	.byte	1,0,0,4,11,0,0,0,5,19,1,3,8,58,15,59,15,57,15,11,15,0,0,6,23,1,58,15,59,15,57,15,11,15,0,0,7,36,0,3,8
	.byte	11,15,62,15,0,0,8,13,0,3,8,11,15,73,19,56,9,0,0,9,13,0,3,8,11,15,73,19,13,15,12,15,56,9,0,0,10,1,1,11
	.byte	15,73,19,0,0,11,33,0,47,15,0,0,12,53,0,73,19,0,0,13,15,0,73,19,0,0,14,46,1,3,8,32,13,58,15,59,15,57,15
	.byte	73,19,54,15,39,12,0,0,15,5,0,3,8,58,15,59,15,57,15,73,19,0,0,16,46,0,3,8,58,15,59,15,57,15,54,15,39,12
	.byte	63,12,60,12,0,0,17,46,1,3,8,58,15,59,15,57,15,54,15,39,12,63,12,60,12,0,0,18,23,1,3,8,58,15,59,15,57,15
	.byte	11,15,0,0,19,19,1,58,15,59,15,57,15,11,15,0,0,20,38,0,73,19,0,0,21,46,1,49,19,0,0,22,29,1,49,19,0,0,23
	.byte	5,0,49,19,0,0,24,11,0,49,19,0,0,25,11,1,49,19,0,0,26,59,0,3,8,0,0,27,22,0,3,8,58,15,59,15,57,15,73,19
	.byte	0,0,28,21,0,54,15,0,0,0
	.sdecl	'.debug_line',debug
	.sect	'.debug_line'
.L72:
	.word	.L335-.L334
.L334:
	.half	3
	.word	.L337-.L336
.L336:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\general\\tricore\\inc\\TC27xC',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\tricore_general\\ssc\\inc',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\inc',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\BSW\\mcal_base\\general\\tricore\\inc',0,0
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0,0,0,0
	.byte	'IfxPort_regdef.h',0,1,0,0
	.byte	'Mcal_WdgLib.h',0,2,0,0
	.byte	'Port.h',0,3,0,0
	.byte	'Platform_Types.h',0,4,0,0
	.byte	'Mcal_TcLib.h',0,2,0,0,0
.L337:
.L335:
	.sdecl	'.debug_info',debug,cluster('Port_Init')
	.sect	'.debug_info'
.L73:
	.word	2381
	.half	3
	.word	.L74
	.byte	4,1
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\Debug\\',0,1,1
	.word	.L76,.L75
	.byte	2
	.word	.L69
	.byte	3
	.byte	'Port_Init',0,1,216,3,6,1,1,1
	.word	.L66,.L87,.L65
	.byte	4
	.byte	'ConfigPtr',0,1,216,3,42
	.word	.L88,.L89
	.byte	5
	.word	.L66,.L87
	.byte	6
	.word	.L90,.L91,.L92
	.byte	7
	.word	.L93,.L91,.L92
	.byte	8
	.byte	'DataPtr',0,1,208,13,28
	.word	.L94,.L95
	.byte	8
	.byte	'ConfigDataPtr',0,1,209,13,28
	.word	.L96,.L97
	.byte	8
	.byte	'PortNumber',0,1,211,13,28
	.word	.L98,.L99
	.byte	8
	.byte	'PortLevel',0,1,213,13,28
	.word	.L98,.L100
	.byte	8
	.byte	'ConfigIndex',0,1,216,13,28
	.word	.L98,.L101
	.byte	8
	.byte	'PortAddressPtr',0,1,217,13,28
	.word	.L102,.L103
	.byte	8
	.byte	'LVDSDataPtr',0,1,218,13,28
	.word	.L94,.L104
	.byte	8
	.byte	'PCSRDataPtr',0,1,219,13,28
	.word	.L94,.L105
	.byte	8
	.byte	'LVDSRegPtr',0,1,220,13,28
	.word	.L106,.L107
	.byte	8
	.byte	'PCSRRegPtr',0,1,221,13,28
	.word	.L106,.L108
	.byte	8
	.byte	'counter',0,1,222,13,28
	.word	.L98,.L109
	.byte	6
	.word	.L110,.L91,.L111
	.byte	7
	.word	.L112,.L91,.L111
	.byte	8
	.byte	'PortNumber',0,1,239,14,27
	.word	.L98,.L113
	.byte	8
	.byte	'ConfigIndex',0,1,242,14,27
	.word	.L98,.L114
	.byte	8
	.byte	'PortAddressPtr',0,1,243,14,21
	.word	.L102,.L115
	.byte	6
	.word	.L116,.L3,.L117
	.byte	9
	.word	.L118,.L119
	.byte	7
	.word	.L120,.L3,.L117
	.byte	8
	.byte	'RetVal',0,1,147,16,10
	.word	.L98,.L121
	.byte	6
	.word	.L122,.L123,.L5
	.byte	9
	.word	.L124,.L125
	.byte	7
	.word	.L126,.L123,.L5
	.byte	8
	.byte	'RetVal',0,1,241,15,10
	.word	.L98,.L127
	.byte	0,0,6
	.word	.L128,.L4,.L6
	.byte	9
	.word	.L129,.L130
	.byte	10
	.word	.L131,.L132
	.byte	8
	.byte	'RetVal',0,1,207,15,10
	.word	.L98,.L133
	.byte	0,0,6
	.word	.L128,.L8,.L117
	.byte	9
	.word	.L129,.L130
	.byte	0,0,0,6
	.word	.L134,.L135,.L10
	.byte	9
	.word	.L136,.L137
	.byte	10
	.word	.L138,.L139
	.byte	8
	.byte	'RetVal',0,1,170,15,10
	.word	.L102,.L142
	.byte	0,0,6
	.word	.L134,.L140,.L141
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L143,.L141,.L144
	.byte	9
	.word	.L145,.L146
	.byte	7
	.word	.L147,.L141,.L144
	.byte	8
	.byte	'RetVal',0,1,187,17,10
	.word	.L148,.L149
	.byte	0,0,6
	.word	.L134,.L144,.L13
	.byte	9
	.word	.L136,.L137
	.byte	10
	.word	.L138,.L150
	.byte	8
	.byte	'RetVal',0,1,170,15,10
	.word	.L102,.L152
	.byte	0,0,6
	.word	.L134,.L151,.L12
	.byte	9
	.word	.L136,.L137
	.byte	0,0,0,6
	.word	.L116,.L15,.L153
	.byte	9
	.word	.L118,.L119
	.byte	7
	.word	.L120,.L15,.L153
	.byte	8
	.byte	'RetVal',0,1,147,16,10
	.word	.L98,.L154
	.byte	6
	.word	.L122,.L155,.L17
	.byte	9
	.word	.L124,.L125
	.byte	7
	.word	.L126,.L155,.L17
	.byte	8
	.byte	'RetVal',0,1,241,15,10
	.word	.L98,.L156
	.byte	0,0,6
	.word	.L128,.L16,.L18
	.byte	9
	.word	.L129,.L130
	.byte	10
	.word	.L131,.L157
	.byte	8
	.byte	'RetVal',0,1,207,15,10
	.word	.L98,.L158
	.byte	0,0,6
	.word	.L128,.L20,.L153
	.byte	9
	.word	.L129,.L130
	.byte	0,0,0,6
	.word	.L134,.L159,.L22
	.byte	9
	.word	.L136,.L137
	.byte	10
	.word	.L138,.L160
	.byte	8
	.byte	'RetVal',0,1,170,15,10
	.word	.L102,.L169
	.byte	0,0,6
	.word	.L170,.L22,.L171
	.byte	9
	.word	.L172,.L173
	.byte	7
	.word	.L174,.L22,.L171
	.byte	8
	.byte	'RetVal',0,1,248,16,10
	.word	.L98,.L175
	.byte	6
	.word	.L176,.L177,.L24
	.byte	9
	.word	.L178,.L179
	.byte	7
	.word	.L180,.L177,.L24
	.byte	8
	.byte	'RetVal',0,1,181,16,10
	.word	.L98,.L181
	.byte	0,0,6
	.word	.L182,.L23,.L25
	.byte	9
	.word	.L183,.L184
	.byte	10
	.word	.L185,.L186
	.byte	8
	.byte	'RetVal',0,1,215,16,10
	.word	.L98,.L187
	.byte	0,0,6
	.word	.L182,.L27,.L171
	.byte	9
	.word	.L183,.L184
	.byte	0,0,0,6
	.word	.L188,.L189,.L29
	.byte	9
	.word	.L190,.L191
	.byte	7
	.word	.L192,.L189,.L29
	.byte	8
	.byte	'RetVal',0,1,189,18,10
	.word	.L98,.L193
	.byte	0,0,6
	.word	.L134,.L29,.L28
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L194,.L195,.L196
	.byte	9
	.word	.L197,.L198
	.byte	9
	.word	.L199,.L200
	.byte	7
	.word	.L201,.L195,.L196
	.byte	8
	.byte	'RetVal',0,1,218,17,10
	.word	.L148,.L202
	.byte	0,0,6
	.word	.L134,.L161,.L31
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L194,.L203,.L204
	.byte	9
	.word	.L197,.L198
	.byte	9
	.word	.L199,.L200
	.byte	7
	.word	.L201,.L203,.L204
	.byte	8
	.byte	'RetVal',0,1,218,17,10
	.word	.L148,.L205
	.byte	0,0,6
	.word	.L134,.L162,.L33
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L194,.L206,.L207
	.byte	9
	.word	.L197,.L198
	.byte	9
	.word	.L199,.L200
	.byte	7
	.word	.L201,.L206,.L207
	.byte	8
	.byte	'RetVal',0,1,218,17,10
	.word	.L148,.L208
	.byte	0,0,6
	.word	.L134,.L163,.L35
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L194,.L209,.L210
	.byte	9
	.word	.L197,.L198
	.byte	9
	.word	.L199,.L200
	.byte	7
	.word	.L201,.L209,.L210
	.byte	8
	.byte	'RetVal',0,1,218,17,10
	.word	.L148,.L211
	.byte	0,0,6
	.word	.L134,.L164,.L37
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L212,.L37,.L165
	.byte	9
	.word	.L213,.L214
	.byte	7
	.word	.L215,.L37,.L165
	.byte	8
	.byte	'RetVal',0,1,161,19,10
	.word	.L98,.L216
	.byte	6
	.word	.L217,.L218,.L39
	.byte	9
	.word	.L219,.L220
	.byte	7
	.word	.L221,.L218,.L39
	.byte	8
	.byte	'RetVal',0,1,128,19,10
	.word	.L98,.L222
	.byte	0,0,6
	.word	.L223,.L38,.L40
	.byte	9
	.word	.L224,.L225
	.byte	10
	.word	.L226,.L227
	.byte	8
	.byte	'RetVal',0,1,223,18,10
	.word	.L98,.L228
	.byte	0,0,6
	.word	.L223,.L42,.L165
	.byte	9
	.word	.L224,.L225
	.byte	0,0,0,6
	.word	.L134,.L165,.L166
	.byte	9
	.word	.L136,.L137
	.byte	0,6
	.word	.L229,.L230,.L231
	.byte	9
	.word	.L232,.L233
	.byte	7
	.word	.L234,.L230,.L231
	.byte	8
	.byte	'RetVal',0,1,167,20,10
	.word	.L98,.L235
	.byte	0,0,6
	.word	.L236,.L43,.L167
	.byte	9
	.word	.L237,.L238
	.byte	7
	.word	.L239,.L43,.L167
	.byte	8
	.byte	'RetVal',0,1,133,20,10
	.word	.L98,.L240
	.byte	6
	.word	.L241,.L242,.L49
	.byte	9
	.word	.L243,.L244
	.byte	7
	.word	.L245,.L242,.L49
	.byte	8
	.byte	'RetVal',0,1,228,19,10
	.word	.L98,.L246
	.byte	0,0,6
	.word	.L247,.L48,.L50
	.byte	9
	.word	.L248,.L249
	.byte	10
	.word	.L250,.L251
	.byte	8
	.byte	'RetVal',0,1,195,19,10
	.word	.L98,.L252
	.byte	0,0,6
	.word	.L247,.L52,.L167
	.byte	9
	.word	.L248,.L249
	.byte	0,0,0,6
	.word	.L134,.L167,.L168
	.byte	9
	.word	.L136,.L137
	.byte	0,0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_Init')
	.sect	'.debug_abbrev'
.L74:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,5,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,5,11,1,17,1,18,1,0,0,6,29,1,49
	.byte	16,17,1,18,1,0,0,7,11,1,49,16,17,1,18,1,0,0,8,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,9,5,0,49,16,2,6
	.byte	0,0,10,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_Init')
	.sect	'.debug_line'
.L75:
	.word	.L339-.L338
.L338:
	.half	3
	.word	.L341-.L340
.L340:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0,0,0,0,0
.L341:
	.byte	5,23,7,0,5,2
	.word	.L66
	.byte	3,159,4,1,5,15,9
	.half	.L91-.L66
	.byte	3,213,10,1,5,19,9
	.half	.L285-.L91
	.byte	3,4,1,5,54,9
	.half	.L287-.L285
	.byte	1,5,21,9
	.half	.L3-.L287
	.byte	3,156,1,1,5,13,9
	.half	.L342-.L3
	.byte	1,5,15,7,9
	.half	.L123-.L342
	.byte	3,94,1,5,53,9
	.half	.L343-.L123
	.byte	1,5,44,9
	.half	.L344-.L343
	.byte	1,5,72,9
	.half	.L345-.L344
	.byte	1,5,3,9
	.half	.L289-.L345
	.byte	3,3,1,5,71,9
	.half	.L5-.L289
	.byte	3,31,1,5,15,9
	.half	.L4-.L5
	.byte	3,188,127,1,5,44,9
	.half	.L346-.L4
	.byte	1,5,15,9
	.half	.L347-.L346
	.byte	3,1,1,5,55,9
	.half	.L290-.L347
	.byte	3,127,1,5,3,9
	.half	.L348-.L290
	.byte	3,3,1,9
	.half	.L6-.L348
	.byte	3,196,0,1,5,5,9
	.half	.L8-.L6
	.byte	3,228,126,1,5,24,7,9
	.half	.L117-.L8
	.byte	3,2,1,5,15,9
	.half	.L135-.L117
	.byte	3,48,1,5,29,9
	.half	.L349-.L135
	.byte	3,2,1,5,27,9
	.half	.L291-.L349
	.byte	1,5,31,9
	.half	.L350-.L291
	.byte	3,127,1,5,29,9
	.half	.L351-.L350
	.byte	1,5,69,9
	.half	.L352-.L351
	.byte	1,5,41,9
	.half	.L292-.L352
	.byte	3,127,1,5,10,9
	.half	.L353-.L292
	.byte	1,5,3,9
	.half	.L294-.L353
	.byte	3,4,1,5,9,9
	.half	.L10-.L294
	.byte	3,81,1,5,24,9
	.half	.L354-.L10
	.byte	1,5,42,9
	.half	.L355-.L354
	.byte	1,5,55,9
	.half	.L356-.L355
	.byte	1,5,30,9
	.half	.L140-.L356
	.byte	3,127,1,5,72,9
	.half	.L141-.L140
	.byte	3,187,2,1,5,51,9
	.half	.L357-.L141
	.byte	1,5,70,9
	.half	.L358-.L357
	.byte	1,5,22,9
	.half	.L359-.L358
	.byte	1,5,48,9
	.half	.L293-.L359
	.byte	1,5,3,9
	.half	.L360-.L293
	.byte	3,1,1,5,7,9
	.half	.L11-.L360
	.byte	3,199,125,1,5,15,7,9
	.half	.L144-.L11
	.byte	3,41,1,5,29,9
	.half	.L361-.L144
	.byte	3,2,1,5,27,9
	.half	.L296-.L361
	.byte	1,5,31,9
	.half	.L362-.L296
	.byte	3,127,1,5,29,9
	.half	.L363-.L362
	.byte	1,5,69,9
	.half	.L364-.L363
	.byte	1,5,41,9
	.half	.L297-.L364
	.byte	3,127,1,5,10,9
	.half	.L365-.L297
	.byte	1,5,3,9
	.half	.L295-.L365
	.byte	3,4,1,5,11,9
	.half	.L13-.L295
	.byte	3,89,1,5,26,9
	.half	.L366-.L13
	.byte	1,5,44,9
	.half	.L367-.L366
	.byte	1,5,57,9
	.half	.L368-.L367
	.byte	1,5,32,9
	.half	.L151-.L368
	.byte	3,127,1,5,22,9
	.half	.L12-.L151
	.byte	3,3,1,5,18,9
	.half	.L369-.L12
	.byte	3,1,1,5,66,9
	.half	.L9-.L369
	.byte	3,107,1,5,38,9
	.half	.L2-.L9
	.byte	1,5,54,9
	.half	.L370-.L2
	.byte	1,5,15,7,9
	.half	.L111-.L370
	.byte	3,234,126,1,5,33,9
	.half	.L286-.L111
	.byte	3,3,1,5,48,9
	.half	.L371-.L286
	.byte	1,5,33,9
	.half	.L298-.L371
	.byte	3,3,1,5,48,9
	.half	.L372-.L298
	.byte	1,5,19,9
	.half	.L299-.L372
	.byte	3,3,1,5,55,9
	.half	.L288-.L299
	.byte	1,5,21,9
	.half	.L15-.L288
	.byte	3,169,2,1,5,13,9
	.half	.L373-.L15
	.byte	1,5,15,7,9
	.half	.L155-.L373
	.byte	3,94,1,5,53,9
	.half	.L374-.L155
	.byte	1,5,44,9
	.half	.L375-.L374
	.byte	1,5,72,9
	.half	.L376-.L375
	.byte	1,5,3,9
	.half	.L300-.L376
	.byte	3,3,1,5,71,9
	.half	.L17-.L300
	.byte	3,31,1,5,15,9
	.half	.L16-.L17
	.byte	3,188,127,1,5,44,9
	.half	.L377-.L16
	.byte	1,5,15,9
	.half	.L378-.L377
	.byte	3,1,1,5,55,9
	.half	.L301-.L378
	.byte	3,127,1,5,3,9
	.half	.L379-.L301
	.byte	3,3,1,9
	.half	.L18-.L379
	.byte	3,196,0,1,5,5,9
	.half	.L20-.L18
	.byte	3,215,125,1,5,24,7,9
	.half	.L153-.L20
	.byte	3,4,1,5,39,9
	.half	.L380-.L153
	.byte	1,5,59,9
	.half	.L381-.L380
	.byte	1,5,15,9
	.half	.L159-.L381
	.byte	3,187,1,1,5,29,9
	.half	.L382-.L159
	.byte	3,2,1,5,27,9
	.half	.L383-.L382
	.byte	1,5,31,9
	.half	.L384-.L383
	.byte	3,127,1,5,29,9
	.half	.L385-.L384
	.byte	1,5,69,9
	.half	.L386-.L385
	.byte	1,5,41,9
	.half	.L303-.L386
	.byte	3,127,1,5,10,9
	.half	.L387-.L303
	.byte	1,5,3,9
	.half	.L305-.L387
	.byte	3,4,1,5,22,9
	.half	.L22-.L305
	.byte	3,200,1,1,5,13,9
	.half	.L388-.L22
	.byte	1,5,3,7,9
	.half	.L177-.L388
	.byte	3,64,1,5,71,9
	.half	.L24-.L177
	.byte	3,192,0,1,5,15,9
	.half	.L23-.L24
	.byte	3,95,1,5,53,9
	.half	.L389-.L23
	.byte	1,5,44,9
	.half	.L304-.L389
	.byte	1,5,72,9
	.half	.L390-.L304
	.byte	1,5,3,9
	.half	.L307-.L390
	.byte	3,3,1,9
	.half	.L25-.L307
	.byte	3,33,1,5,7,9
	.half	.L27-.L25
	.byte	3,129,125,1,5,22,7,9
	.half	.L171-.L27
	.byte	3,4,1,5,16,9
	.half	.L189-.L171
	.byte	3,189,4,1,5,26,9
	.half	.L391-.L189
	.byte	1,5,51,9
	.half	.L392-.L391
	.byte	1,5,77,9
	.half	.L308-.L392
	.byte	1,5,3,9
	.half	.L393-.L308
	.byte	3,4,1,5,31,9
	.half	.L29-.L393
	.byte	3,192,123,1,5,47,9
	.half	.L28-.L29
	.byte	3,3,1,5,62,9
	.half	.L195-.L28
	.byte	3,214,3,1,5,41,9
	.half	.L394-.L195
	.byte	1,5,60,9
	.half	.L395-.L394
	.byte	1,5,38,9
	.half	.L310-.L395
	.byte	1,5,3,9
	.half	.L309-.L310
	.byte	3,1,1,5,7,9
	.half	.L30-.L309
	.byte	3,169,124,1,5,36,7,9
	.half	.L196-.L30
	.byte	3,2,1,5,34,9
	.half	.L161-.L196
	.byte	1,5,14,9
	.half	.L31-.L161
	.byte	3,4,1,5,47,9
	.half	.L396-.L31
	.byte	3,2,1,5,62,9
	.half	.L203-.L396
	.byte	3,206,3,1,5,41,9
	.half	.L397-.L203
	.byte	1,5,60,9
	.half	.L398-.L397
	.byte	1,5,38,9
	.half	.L312-.L398
	.byte	1,5,3,9
	.half	.L311-.L312
	.byte	3,1,1,5,7,9
	.half	.L32-.L311
	.byte	3,177,124,1,5,36,7,9
	.half	.L204-.L32
	.byte	3,2,1,5,34,9
	.half	.L162-.L204
	.byte	1,5,14,9
	.half	.L33-.L162
	.byte	3,4,1,5,47,9
	.half	.L399-.L33
	.byte	3,2,1,5,62,9
	.half	.L206-.L399
	.byte	3,198,3,1,5,41,9
	.half	.L400-.L206
	.byte	1,5,60,9
	.half	.L401-.L400
	.byte	1,5,38,9
	.half	.L314-.L401
	.byte	1,5,3,9
	.half	.L313-.L314
	.byte	3,1,1,5,7,9
	.half	.L34-.L313
	.byte	3,185,124,1,5,36,7,9
	.half	.L207-.L34
	.byte	3,2,1,5,34,9
	.half	.L163-.L207
	.byte	1,5,14,9
	.half	.L35-.L163
	.byte	3,4,1,5,47,9
	.half	.L402-.L35
	.byte	3,2,1,5,62,9
	.half	.L209-.L402
	.byte	3,190,3,1,5,41,9
	.half	.L403-.L209
	.byte	1,5,60,9
	.half	.L404-.L403
	.byte	1,5,38,9
	.half	.L316-.L404
	.byte	1,5,3,9
	.half	.L315-.L316
	.byte	3,1,1,5,7,9
	.half	.L36-.L315
	.byte	3,193,124,1,5,36,7,9
	.half	.L210-.L36
	.byte	3,2,1,5,34,9
	.half	.L164-.L210
	.byte	1,5,21,9
	.half	.L37-.L164
	.byte	3,131,5,1,5,13,9
	.half	.L405-.L37
	.byte	1,5,3,7,9
	.half	.L218-.L405
	.byte	3,98,1,5,75,9
	.half	.L39-.L218
	.byte	3,30,1,5,15,9
	.half	.L38-.L39
	.byte	3,190,127,1,5,44,9
	.half	.L406-.L38
	.byte	1,5,15,9
	.half	.L317-.L406
	.byte	3,1,1,5,55,9
	.half	.L319-.L317
	.byte	3,127,1,5,3,9
	.half	.L407-.L319
	.byte	3,3,1,9
	.half	.L40-.L407
	.byte	3,194,0,1,5,7,9
	.half	.L42-.L40
	.byte	3,253,122,1,5,74,7,9
	.half	.L165-.L42
	.byte	3,4,1,5,22,9
	.half	.L166-.L165
	.byte	3,2,1,5,57,9
	.half	.L320-.L166
	.byte	1,5,43,9
	.half	.L45-.L320
	.byte	3,2,1,5,29,9
	.half	.L230-.L45
	.byte	3,254,5,1,5,3,9
	.half	.L321-.L230
	.byte	3,1,1,5,11,9
	.half	.L46-.L321
	.byte	3,129,122,1,5,32,7,9
	.half	.L231-.L46
	.byte	3,2,1,5,28,9
	.half	.L408-.L231
	.byte	3,2,1,5,26,9
	.half	.L322-.L408
	.byte	1,5,30,9
	.half	.L409-.L322
	.byte	3,1,1,5,23,9
	.half	.L47-.L409
	.byte	3,4,1,5,24,9
	.half	.L410-.L47
	.byte	3,3,1,5,66,9
	.half	.L411-.L410
	.byte	3,114,1,5,57,9
	.half	.L44-.L411
	.byte	1,5,21,7,9
	.half	.L43-.L44
	.byte	3,222,5,1,5,13,9
	.half	.L412-.L43
	.byte	1,5,15,7,9
	.half	.L242-.L412
	.byte	3,95,1,5,53,9
	.half	.L413-.L242
	.byte	1,5,44,9
	.half	.L414-.L413
	.byte	1,5,72,9
	.half	.L415-.L414
	.byte	1,5,3,9
	.half	.L323-.L415
	.byte	3,3,1,5,75,9
	.half	.L49-.L323
	.byte	3,30,1,5,15,9
	.half	.L48-.L49
	.byte	3,190,127,1,5,44,9
	.half	.L416-.L48
	.byte	1,5,15,9
	.half	.L417-.L416
	.byte	3,1,1,5,55,9
	.half	.L324-.L417
	.byte	3,127,1,5,3,9
	.half	.L418-.L324
	.byte	3,3,1,9
	.half	.L50-.L418
	.byte	3,194,0,1,5,7,9
	.half	.L52-.L50
	.byte	3,177,122,1,5,73,7,9
	.half	.L167-.L52
	.byte	3,4,1,5,40,9
	.half	.L168-.L167
	.byte	3,2,1,5,23,9
	.half	.L419-.L168
	.byte	3,2,1,5,21,9
	.half	.L325-.L419
	.byte	1,5,37,9
	.half	.L420-.L325
	.byte	3,1,1,5,21,9
	.half	.L421-.L420
	.byte	3,4,1,5,18,9
	.half	.L53-.L421
	.byte	3,3,1,5,67,9
	.half	.L21-.L53
	.byte	3,161,127,1,5,39,9
	.half	.L14-.L21
	.byte	1,5,55,9
	.half	.L422-.L14
	.byte	1,5,20,7,9
	.half	.L423-.L422
	.byte	3,229,0,1,5,19,9
	.half	.L424-.L423
	.byte	3,2,1,5,34,9
	.half	.L425-.L424
	.byte	1,5,17,9
	.half	.L426-.L425
	.byte	1,5,15,9
	.half	.L427-.L426
	.byte	1,5,18,9
	.half	.L428-.L427
	.byte	3,3,1,5,1,9
	.half	.L92-.L428
	.byte	3,216,117,1,7,9
	.half	.L77-.L92
	.byte	0,1,1
.L339:
	.sdecl	'.debug_ranges',debug,cluster('Port_Init')
	.sect	'.debug_ranges'
.L76:
	.word	-1,.L66,0,.L77-.L66,0,0
.L132:
	.word	-1,.L66,.L4-.L66,.L6-.L66,.L8-.L66,.L117-.L66,0,0
.L139:
	.word	-1,.L66,.L135-.L66,.L10-.L66,.L140-.L66,.L141-.L66,0,0
.L150:
	.word	-1,.L66,.L144-.L66,.L13-.L66,.L151-.L66,.L12-.L66,0,0
.L157:
	.word	-1,.L66,.L16-.L66,.L18-.L66,.L20-.L66,.L153-.L66,0,0
.L160:
	.word	-1,.L66,.L159-.L66,.L22-.L66,.L29-.L66,.L28-.L66,.L161-.L66,.L31-.L66,.L162-.L66,.L33-.L66,.L163-.L66
	.word	.L35-.L66,.L164-.L66,.L37-.L66,.L165-.L66,.L166-.L66,.L167-.L66,.L168-.L66,0,0
.L186:
	.word	-1,.L66,.L23-.L66,.L25-.L66,.L27-.L66,.L171-.L66,0,0
.L227:
	.word	-1,.L66,.L38-.L66,.L40-.L66,.L42-.L66,.L165-.L66,0,0
.L251:
	.word	-1,.L66,.L48-.L66,.L50-.L66,.L52-.L66,.L167-.L66,0,0
	.sdecl	'.debug_info',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_info'
.L78:
	.word	704
	.half	3
	.word	.L79
	.byte	4,1
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\Debug\\',0,1,1
	.word	.L81,.L80
	.byte	2
	.word	.L69
	.byte	3
	.byte	'Port_RefreshPortDirection',0,1,234,9,6,1,1,1
	.word	.L68,.L253,.L67
	.byte	4
	.word	.L68,.L253
	.byte	5
	.byte	'LoopCtr',0,1,236,9,25
	.word	.L98,.L254
	.byte	5
	.byte	'PortNumber',0,1,238,9,25
	.word	.L98,.L255
	.byte	5
	.byte	'ConfigIndex',0,1,239,9,25
	.word	.L98,.L256
	.byte	5
	.byte	'DataPtr',0,1,245,9,26
	.word	.L94,.L257
	.byte	5
	.byte	'IocrDataPtr',0,1,246,9,26
	.word	.L258,.L259
	.byte	5
	.byte	'IocrRegPtr',0,1,247,9,26
	.word	.L260,.L261
	.byte	5
	.byte	'PortAddressPtr',0,1,248,9,10
	.word	.L102,.L262
	.byte	6
	.word	.L116,.L54,.L263
	.byte	7
	.word	.L118,.L264
	.byte	8
	.word	.L120,.L54,.L263
	.byte	5
	.byte	'RetVal',0,1,147,16,10
	.word	.L98,.L265
	.byte	6
	.word	.L122,.L266,.L56
	.byte	7
	.word	.L124,.L267
	.byte	8
	.word	.L126,.L266,.L56
	.byte	5
	.byte	'RetVal',0,1,241,15,10
	.word	.L98,.L268
	.byte	0,0,6
	.word	.L128,.L55,.L57
	.byte	7
	.word	.L129,.L269
	.byte	9
	.word	.L131,.L270
	.byte	5
	.byte	'RetVal',0,1,207,15,10
	.word	.L98,.L271
	.byte	0,0,6
	.word	.L128,.L59,.L263
	.byte	7
	.word	.L129,.L269
	.byte	0,0,0,6
	.word	.L134,.L272,.L273
	.byte	7
	.word	.L136,.L274
	.byte	8
	.word	.L138,.L272,.L273
	.byte	5
	.byte	'RetVal',0,1,170,15,10
	.word	.L102,.L275
	.byte	0,0,6
	.word	.L276,.L62,.L277
	.byte	7
	.word	.L278,.L279
	.byte	7
	.word	.L280,.L281
	.byte	8
	.word	.L282,.L62,.L277
	.byte	5
	.byte	'RetVal',0,1,153,17,10
	.word	.L148,.L283
	.byte	0,0,0,0,0
	.sdecl	'.debug_abbrev',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_abbrev'
.L79:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,85,6,16,6,0,0,2,61,0,24,16,0,0,3,46,1,3,8,58,15,59,15,57,15,54,15
	.byte	39,12,63,12,17,1,18,1,64,6,0,0,4,11,1,17,1,18,1,0,0,5,52,0,3,8,58,15,59,15,57,15,73,16,2,6,0,0,6,29,1
	.byte	49,16,17,1,18,1,0,0,7,5,0,49,16,2,6,0,0,8,11,1,49,16,17,1,18,1,0,0,9,11,1,49,16,85,6,0,0,0
	.sdecl	'.debug_line',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_line'
.L80:
	.word	.L430-.L429
.L429:
	.half	3
	.word	.L432-.L431
.L431:
	.byte	2,1,-4,9,10,0,1,1,1,1,0,0,0,1,0
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0,0,0,0,0
.L432:
	.byte	5,15,7,0,5,2
	.word	.L68
	.byte	3,138,10,1,5,16,9
	.half	.L326-.L68
	.byte	3,1,1,5,21,9
	.half	.L54-.L326
	.byte	3,137,6,1,5,13,9
	.half	.L433-.L54
	.byte	1,5,15,7,9
	.half	.L266-.L433
	.byte	3,94,1,5,53,9
	.half	.L434-.L266
	.byte	1,5,44,9
	.half	.L435-.L434
	.byte	1,5,72,9
	.half	.L436-.L435
	.byte	1,5,3,9
	.half	.L327-.L436
	.byte	3,3,1,5,71,9
	.half	.L56-.L327
	.byte	3,31,1,5,15,9
	.half	.L55-.L56
	.byte	3,188,127,1,5,44,9
	.half	.L437-.L55
	.byte	1,5,15,9
	.half	.L438-.L437
	.byte	3,1,1,5,55,9
	.half	.L328-.L438
	.byte	3,127,1,5,3,9
	.half	.L439-.L328
	.byte	3,3,1,9
	.half	.L57-.L439
	.byte	3,196,0,1,5,6,9
	.half	.L59-.L57
	.byte	3,247,121,1,5,20,7,9
	.half	.L263-.L59
	.byte	3,6,1,5,35,9
	.half	.L440-.L263
	.byte	1,5,55,9
	.half	.L441-.L440
	.byte	1,5,15,9
	.half	.L272-.L441
	.byte	3,153,5,1,5,29,9
	.half	.L442-.L272
	.byte	3,2,1,5,27,9
	.half	.L443-.L442
	.byte	1,5,31,9
	.half	.L444-.L443
	.byte	3,127,1,5,29,9
	.half	.L445-.L444
	.byte	1,5,69,9
	.half	.L446-.L445
	.byte	1,5,41,9
	.half	.L330-.L446
	.byte	3,127,1,5,10,9
	.half	.L447-.L330
	.byte	1,5,3,9
	.half	.L331-.L447
	.byte	3,4,1,5,73,9
	.half	.L61-.L331
	.byte	3,249,122,1,5,16,9
	.half	.L273-.L61
	.byte	3,8,1,5,23,9
	.half	.L62-.L273
	.byte	3,232,6,1,5,50,9
	.half	.L448-.L62
	.byte	1,5,45,9
	.half	.L449-.L448
	.byte	3,1,1,5,24,9
	.half	.L450-.L449
	.byte	1,5,43,9
	.half	.L451-.L450
	.byte	1,5,60,9
	.half	.L452-.L451
	.byte	3,127,1,5,12,9
	.half	.L453-.L452
	.byte	1,5,3,9
	.half	.L332-.L453
	.byte	3,3,1,5,9,9
	.half	.L63-.L332
	.byte	3,152,121,1,5,25,7,9
	.half	.L277-.L63
	.byte	3,13,1,5,23,9
	.half	.L333-.L277
	.byte	1,5,19,9
	.half	.L64-.L333
	.byte	3,7,1,5,20,9
	.half	.L454-.L64
	.byte	3,3,1,5,16,9
	.half	.L455-.L454
	.byte	3,8,1,5,28,9
	.half	.L456-.L455
	.byte	3,1,1,5,49,9
	.half	.L457-.L456
	.byte	1,5,18,7,9
	.half	.L458-.L457
	.byte	3,2,1,5,15,9
	.half	.L60-.L458
	.byte	3,2,1,5,27,9
	.half	.L459-.L60
	.byte	3,1,1,5,43,9
	.half	.L460-.L459
	.byte	1,5,1,7,9
	.half	.L461-.L460
	.byte	3,2,1,7,9
	.half	.L82-.L461
	.byte	0,1,1
.L430:
	.sdecl	'.debug_ranges',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_ranges'
.L81:
	.word	-1,.L68,0,.L82-.L68,0,0
.L270:
	.word	-1,.L68,.L55-.L68,.L57-.L68,.L59-.L68,.L263-.L68,0,0
	.sdecl	'.debug_info',debug,cluster('Port_kAvailablePins')
	.sect	'.debug_info'
.L83:
	.word	193
	.half	3
	.word	.L84
	.byte	4,1
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\Debug\\',0,1,1,2
	.word	.L69
	.byte	3
	.byte	'Port_kAvailablePins',0,1,192,2,21
	.word	.L284
	.byte	5,3
	.word	Port_kAvailablePins
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Port_kAvailablePins')
	.sect	'.debug_abbrev'
.L84:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_info',debug,cluster('Port_kConfigPtr')
	.sect	'.debug_info'
.L85:
	.word	189
	.half	3
	.word	.L86
	.byte	4,1
	.byte	'..\\BSW\\mcal_base\\port_infineon_tricore\\ssc\\src\\Port.c',0
	.byte	'TASKING VX-toolset for TriCore: C compiler',0
	.byte	'C:\\Workspace_AURIX\\DEVICECONTROL_MCAL\\Debug\\',0,1,1,2
	.word	.L69
	.byte	3
	.byte	'Port_kConfigPtr',0,1,251,2,33
	.word	.L88
	.byte	5,3
	.word	Port_kConfigPtr
	.byte	0
	.sdecl	'.debug_abbrev',debug,cluster('Port_kConfigPtr')
	.sect	'.debug_abbrev'
.L86:
	.byte	1,17,1,3,8,37,8,27,8,19,15,128,70,12,0,0,2,61,0,24,16,0,0,3,52,0,3,8,58,15,59,15,57,15,73,16,2,9,0,0,0
	.sdecl	'.debug_loc',debug,cluster('Port_Init')
	.sect	'.debug_loc'
.L97:
	.word	-1,.L66,.L159-.L66,.L45-.L66
	.half	1
	.byte	100
	.word	0,0
.L101:
	.word	-1,.L66,.L286-.L66,.L87-.L66
	.half	5
	.byte	144,36,157,32,0
	.word	0,0
.L114:
	.word	-1,.L66,.L285-.L66,.L286-.L66
	.half	5
	.byte	144,36,157,32,0
	.word	0,0
.L89:
	.word	-1,.L66,0,.L3-.L66
	.half	1
	.byte	100
	.word	0,0
.L95:
	.word	0,0
.L104:
	.word	-1,.L66,.L298-.L66,.L87-.L66
	.half	1
	.byte	108
	.word	0,0
.L107:
	.word	-1,.L66,.L166-.L66,.L43-.L66
	.half	1
	.byte	110
	.word	0,0
.L191:
	.word	0,0
.L105:
	.word	-1,.L66,.L299-.L66,.L87-.L66
	.half	1
	.byte	109
	.word	0,0
.L108:
	.word	-1,.L66,.L168-.L66,.L53-.L66
	.half	1
	.byte	111
	.word	0,0
.L200:
	.word	-1,.L66,.L195-.L66,.L309-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	.L203-.L66,.L311-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	.L206-.L66,.L313-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	.L209-.L66,.L315-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L220:
	.word	0,0
.L125:
	.word	0,0
.L225:
	.word	0,0
.L179:
	.word	0,0
.L244:
	.word	0,0
.L184:
	.word	0,0
.L249:
	.word	0,0
.L119:
	.word	0,0
.L146:
	.word	0,0
.L238:
	.word	0,0
.L130:
	.word	0,0
.L214:
	.word	0,0
.L198:
	.word	0,0
.L173:
	.word	0,0
.L115:
	.word	0,0
.L103:
	.word	0,0
.L233:
	.word	-1,.L66,.L230-.L66,.L321-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L100:
	.word	-1,.L66,.L189-.L66,.L28-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L113:
	.word	-1,.L66,.L287-.L66,.L288-.L66
	.half	5
	.byte	144,36,157,32,32
	.word	0,0
.L99:
	.word	-1,.L66,.L288-.L66,.L87-.L66
	.half	5
	.byte	144,36,157,32,32
	.word	0,0
.L137:
	.word	0,0
.L65:
	.word	-1,.L66,0,.L87-.L66
	.half	2
	.byte	138,0
	.word	0,0
.L216:
	.word	0,0
.L154:
	.word	0,0
.L142:
	.word	-1,.L66,.L292-.L66,.L293-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	.L294-.L66,.L295-.L66
	.half	1
	.byte	98
	.word	0,0
.L240:
	.word	0,0
.L127:
	.word	0,0
.L133:
	.word	-1,.L66,.L289-.L66,.L4-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	.L290-.L66,.L291-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L222:
	.word	0,0
.L175:
	.word	0,0
.L169:
	.word	-1,.L66,.L303-.L66,.L304-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	.L305-.L66,.L168-.L66
	.half	1
	.byte	111
	.word	0,0
.L208:
	.word	-1,.L66,.L314-.L66,.L209-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L152:
	.word	-1,.L66,.L297-.L66,.L12-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	.L295-.L66,.L12-.L66
	.half	1
	.byte	98
	.word	0,0
.L246:
	.word	0,0
.L193:
	.word	-1,.L66,.L308-.L66,.L28-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L181:
	.word	0,0
.L228:
	.word	-1,.L66,.L318-.L66,.L38-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	.L319-.L66,.L45-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L235:
	.word	-1,.L66,.L321-.L66,.L322-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L205:
	.word	-1,.L66,.L312-.L66,.L206-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L149:
	.word	-1,.L66,.L293-.L66,.L296-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L252:
	.word	-1,.L66,.L323-.L66,.L48-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	.L324-.L66,.L325-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L121:
	.word	0,0
.L211:
	.word	-1,.L66,.L316-.L66,.L317-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L187:
	.word	-1,.L66,.L306-.L66,.L23-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	.L307-.L66,.L189-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L158:
	.word	-1,.L66,.L300-.L66,.L16-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	.L301-.L66,.L302-.L66
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L202:
	.word	-1,.L66,.L310-.L66,.L203-.L66
	.half	5
	.byte	144,32,157,32,0
	.word	0,0
.L156:
	.word	0,0
.L109:
	.word	-1,.L66,.L320-.L66,.L43-.L66
	.half	5
	.byte	144,37,157,32,0
	.word	0,0
	.sdecl	'.debug_loc',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_loc'
.L256:
	.word	-1,.L68,.L54-.L68,.L253-.L68
	.half	5
	.byte	144,34,157,32,0
	.word	0,0
.L257:
	.word	-1,.L68,.L272-.L68,.L60-.L68
	.half	1
	.byte	111
	.word	0,0
.L259:
	.word	0,0
.L261:
	.word	-1,.L68,.L273-.L68,.L60-.L68
	.half	1
	.byte	98
	.word	0,0
.L254:
	.word	-1,.L68,.L62-.L68,.L60-.L68
	.half	5
	.byte	144,33,157,32,0
	.word	0,0
.L281:
	.word	0,0
.L279:
	.word	0,0
.L267:
	.word	0,0
.L269:
	.word	0,0
.L264:
	.word	0,0
.L262:
	.word	0,0
.L274:
	.word	0,0
.L255:
	.word	-1,.L68,.L326-.L68,.L253-.L68
	.half	5
	.byte	144,32,157,32,32
	.word	0,0
.L67:
	.word	-1,.L68,0,.L253-.L68
	.half	2
	.byte	138,0
	.word	0,0
.L265:
	.word	0,0
.L283:
	.word	-1,.L68,.L332-.L68,.L333-.L68
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L268:
	.word	0,0
.L271:
	.word	-1,.L68,.L327-.L68,.L55-.L68
	.half	5
	.byte	144,39,157,32,32
	.word	.L328-.L68,.L329-.L68
	.half	5
	.byte	144,39,157,32,32
	.word	0,0
.L275:
	.word	-1,.L68,.L330-.L68,.L62-.L68
	.half	5
	.byte	144,32,157,32,0
	.word	.L331-.L68,.L273-.L68
	.half	1
	.byte	98
	.word	0,0
	.sdecl	'.debug_frame',debug
	.sect	'.debug_frame'
.L462:
	.word	48
	.word	-1
	.byte	3,0,2,1,27,12,26,0,8,26,8,27,8,30,8,29,8,28,8,16,8,17,8,24,8,25,8,31,8,32,8,33,8,34,8,35,8,36,8,37,8,38
	.byte	8,39
	.sdecl	'.debug_frame',debug,cluster('Port_Init')
	.sect	'.debug_frame'
	.word	12
	.word	.L462,.L66,.L87-.L66
	.sdecl	'.debug_frame',debug,cluster('Port_RefreshPortDirection')
	.sect	'.debug_frame'
	.word	20
	.word	.L462,.L68,.L253-.L68
	.byte	8,19,8,21,8,22,8,23

; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2602    return(RetVal); 
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2603  }
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2604  
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2605  /*Memory Map of the PORT Code*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2606  #define PORT_STOP_SEC_CODE
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2607  /*IFX_MISRA_RULE_19_01_STATUS=File inclusion after pre-processor directives is
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2608   allowed only for MemMap.h*/
; ..\BSW\mcal_base\port_infineon_tricore\ssc\src\Port.c	  2609  #include "MemMap.h"

	; Module end
